[["dplyr-vs-pandas.html", "1 dplyr vs pandas 1.1 select() 1.2 mutate() 1.3 filter() 1.4 group_by() and summarize() 1.5 arrange()", " 1 dplyr vs pandas We will use the five dplyr verbs for comparison select() picks variables based on their names. mutate() adds new variables that are functions of existing variables filter() picks cases based on their values. summarise() reduces multiple values down to a single summary. arrange() changes the ordering of the rows. and use the following toy data to apply the verbs. name gender grade Barney Male 10 Ted Male 11 Marshall Male 13 Lilly Female 12 Robin Female 14 Create Toy Data dplyr pandas df &lt;- tibble( name = c(&quot;Barney&quot;, &quot;Ted&quot;, &quot;Marshall&quot;, &quot;Lilly&quot;,&quot;Robin&quot;), gender = c(&quot;Male&quot;, &quot;Male&quot;,&quot;Male&quot;, &quot;Female&quot;, &quot;Female&quot;), grade = c(10, 11, 13, 12, 14) ) df ## # A tibble: 5 x 3 ## name gender grade ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Barney Male 10 ## 2 Ted Male 11 ## 3 Marshall Male 13 ## 4 Lilly Female 12 ## 5 Robin Female 14 df = pd.DataFrame({ &#39;name&#39;:[&quot;Barney&quot;, &quot;Ted&quot;, &quot;Marshall&quot;, &quot;Lilly&quot;, &quot;Robin&quot;], &#39;gender&#39;:[&quot;Male&quot;, &quot;Male&quot;,&quot;Male&quot;, &quot;Female&quot;, &quot;Female&quot;], &#39;grade&#39;:[10, 11, 13, 12, 14] }) df ## name gender grade ## 0 Barney Male 10 ## 1 Ted Male 11 ## 2 Marshall Male 13 ## 3 Lilly Female 12 ## 4 Robin Female 14 Check Data Structure dplyr pandas glimpse(df) ## Rows: 5 ## Columns: 3 ## $ name &lt;chr&gt; &quot;Barney&quot;, &quot;Ted&quot;, &quot;Marshall&quot;, &quot;Lilly&quot;, &quot;Robin&quot; ## $ gender &lt;chr&gt; &quot;Male&quot;, &quot;Male&quot;, &quot;Male&quot;, &quot;Female&quot;, &quot;Female&quot; ## $ grade &lt;dbl&gt; 10, 11, 13, 12, 14 df.dtypes ## name object ## gender object ## grade int64 ## dtype: object df.shape ## (5, 3) df.info() ## &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; ## RangeIndex: 5 entries, 0 to 4 ## Data columns (total 3 columns): ## name 5 non-null object ## gender 5 non-null object ## grade 5 non-null int64 ## dtypes: int64(1), object(2) ## memory usage: 248.0+ bytes 1.1 select() Task: Pick the variables name and grade. dplyr pandas df %&gt;% select(name, grade) ## # A tibble: 5 x 2 ## name grade ## &lt;chr&gt; &lt;dbl&gt; ## 1 Barney 10 ## 2 Ted 11 ## 3 Marshall 13 ## 4 Lilly 12 ## 5 Robin 14 df[[&#39;name&#39;, &#39;grade&#39;]] ## name grade ## 0 Barney 10 ## 1 Ted 11 ## 2 Marshall 13 ## 3 Lilly 12 ## 4 Robin 14 # or df.drop(columns = [&#39;grade&#39;]) ## name gender ## 0 Barney Male ## 1 Ted Male ## 2 Marshall Male ## 3 Lilly Female ## 4 Robin Female # or df.drop([&#39;grade&#39;], axis = 1) ## name gender ## 0 Barney Male ## 1 Ted Male ## 2 Marshall Male ## 3 Lilly Female ## 4 Robin Female 1.2 mutate() Task: Generate a variable grade_p, expressing grade out of 100. dplyr pandas df %&gt;% mutate(grade_p = grade/20*100) ## # A tibble: 5 x 4 ## name gender grade grade_p ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Barney Male 10 50 ## 2 Ted Male 11 55 ## 3 Marshall Male 13 65 ## 4 Lilly Female 12 60 ## 5 Robin Female 14 70 df[&#39;grade_p&#39;] = df[&#39;grade&#39;]/20*100 df ## name gender grade grade_p ## 0 Barney Male 10 50.0 ## 1 Ted Male 11 55.0 ## 2 Marshall Male 13 65.0 ## 3 Lilly Female 12 60.0 ## 4 Robin Female 14 70.0 # now drop the newly created variable df.drop(columns = &#39;grade_p&#39;, inplace = True) 1.3 filter() Task: Keep Barney or females. dplyr pandas df %&gt;% filter(name == &quot;Barney&quot;| gender == &quot;Female&quot;) ## # A tibble: 3 x 3 ## name gender grade ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Barney Male 10 ## 2 Lilly Female 12 ## 3 Robin Female 14 df[(df[&quot;name&quot;] == &quot;Barney&quot;) | (df[&quot;gender&quot;] == &quot;Female&quot;)] ## name gender grade ## 0 Barney Male 10 ## 3 Lilly Female 12 ## 4 Robin Female 14 1.4 group_by() and summarize() Task: Grouped by gender, find mean grade. dplyr pandas df %&gt;% group_by(gender) %&gt;% summarize(avg_grade = mean(grade)) ## # A tibble: 2 x 2 ## gender avg_grade ## &lt;chr&gt; &lt;dbl&gt; ## 1 Female 13 ## 2 Male 11.3 # returns a series df.groupby(&quot;gender&quot;)[&#39;grade&#39;].mean() ## gender ## Female 13.000000 ## Male 11.333333 ## Name: grade, dtype: float64 # returns a data frame df[[&#39;gender&#39;, &#39;grade&#39;]].groupby(&quot;gender&quot;).mean() ## grade ## gender ## Female 13.000000 ## Male 11.333333 Task: Grouped by gender, find mean, median, minimum, and maximum grade. dplyr pandas df %&gt;% group_by(gender) %&gt;% summarize(mean = mean(grade), median = median(grade), min = min(grade), max = max(grade)) ## # A tibble: 2 x 5 ## gender mean median min max ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Female 13 13 12 14 ## 2 Male 11.3 11 10 13 df.groupby(&quot;gender&quot;)[&#39;grade&#39;].agg( # provide a dictionary {# variable name followed by function &#39;mean&#39;: &#39;mean&#39;, &#39;median&#39;: &#39;median&#39;, &#39;min&#39;: &#39;min&#39;, &#39;max&#39;: &#39;max&#39; } ) ## mean median min max ## gender ## Female 13.000000 13 12 14 ## Male 11.333333 11 10 13 ## ## C:/Users/Bhaswar/AppData/Local/r-miniconda/envs/r-reticulate/python.exe:7: FutureWarning: using a dict on a Series for aggregation ## is deprecated and will be removed in a future version. Use named aggregation instead. ## ## &gt;&gt;&gt; grouper.agg(name_1=func_1, name_2=func_2) 1.5 arrange() Task: Arrange grade in ascending order. dplyr pandas df %&gt;% arrange(grade) ## # A tibble: 5 x 3 ## name gender grade ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Barney Male 10 ## 2 Ted Male 11 ## 3 Lilly Female 12 ## 4 Marshall Male 13 ## 5 Robin Female 14 df.sort_values(&#39;grade&#39;) ## name gender grade ## 0 Barney Male 10 ## 1 Ted Male 11 ## 3 Lilly Female 12 ## 2 Marshall Male 13 ## 4 Robin Female 14 Task: Arrange grade in ascending order. dplyr pandas df %&gt;% arrange(desc(grade)) ## # A tibble: 5 x 3 ## name gender grade ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Robin Female 14 ## 2 Marshall Male 13 ## 3 Lilly Female 12 ## 4 Ted Male 11 ## 5 Barney Male 10 df.sort_values(&#39;grade&#39;, ascending = False) ## name gender grade ## 4 Robin Female 14 ## 2 Marshall Male 13 ## 3 Lilly Female 12 ## 1 Ted Male 11 ## 0 Barney Male 10 Task: Arrange gender in ascending order then arrange grade in descending order. dplyr pandas df %&gt;% arrange(gender, desc(grade)) ## # A tibble: 5 x 3 ## name gender grade ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Robin Female 14 ## 2 Lilly Female 12 ## 3 Marshall Male 13 ## 4 Ted Male 11 ## 5 Barney Male 10 df.sort_values([&#39;gender&#39;,&#39;grade&#39;], ascending = [True, False]) ## name gender grade ## 4 Robin Female 14 ## 3 Lilly Female 12 ## 2 Marshall Male 13 ## 1 Ted Male 11 ## 0 Barney Male 10 "]]
