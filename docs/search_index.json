[["sql.html", "Tool 3 SQL 3.1 CREATE 3.2 DROP 3.3 ALTER 3.4 TRUNCATE 3.5 Guided Exercise: Create table and insert data 3.6 Guided Exercise: Use the ALTER statement to add, delete, or modify columns in two of the existing tables created in the previous exercise. 3.7 Guided Exercise: TRUNCATE 3.8 Guided Exercise: DROP", " Tool 3 SQL 3.1 CREATE The general syntax to create a table: create table TABLENAME ( COLUMN1 datatype, COLUMN2 datatype, COLUMN3 datatype, ... ); To create a table called TEST with two columns - ID of type integer, and NAME of type varchar, we could create it using the following SQL statement: create table TEST( ID int NAME varchar(30) ); To create a table called COUNTRY with an ID column, a two letter country code column CCODE, and a variable length country name column NAME: create table COUNTRY( ID int, CCODE char(2), NAME varchar(60) ); Sometimes you may see additional keywords in a create table statement: create table COUNTRY( ID int NOT NULL, CCODE char(2), NAME varchar(60), PRIMARY KEY(ID) ); In the above example the ID column has the NOT NULL constraint added after the datatype - meaning that it cannot contain a NULL or an empty value. If you look at the last row in the create table statement above you will note that we are using ID as a Primary Key and the database does not allow Primary Keys to have NULL values. A Primary Key is a unique identifier in a table, and using Primary Keys can help speed up your queries significantly. If the table you are trying to create already exists in the database, you will get an error indicating table XXX.YYY already exists. To circumvent this error, either create a table with a different name or first DROP the existing table. It is quite common to issue a DROP before doing a CREATE in test and development scenarios. 3.2 DROP The general syntax to drop a table: drop table TABLENAME; For example, to drop the table COUNTRY, we can use the following code: drop table COUNTRY; 3.3 ALTER ALTER TABLE table_name ADD COLUMN column_name data_type column_constraint; ALTER TABLE table_name DROP COLUMN column_name; ALTER TABLE table_name ALTER COLUMN column_name SET DATA TYPE data_type; ALTER TABLE table_name RENAME COLUMN current_column_name TO new_column_name; 3.4 TRUNCATE TRUNCATE TABLE table_name; 3.5 Guided Exercise: Create table and insert data You will to create two tables PETSALE PET. CREATE TABLE PETSALE ( ID INTEGER NOT NULL, PET CHAR(20), SALEPRICE DECIMAL(6,2), PROFIT DECIMAL(6,2), SALEDATE DATE ); CREATE TABLE PET ( ID INTEGER NOT NULL, ANIMAL VARCHAR(20), QUANTITY INTEGER ); Now insert some records into the two newly created tables and show all the records of the two tables. INSERT INTO PETSALE VALUES (1,&#39;Cat&#39;,450.09,100.47,&#39;2018-05-29&#39;), (2,&#39;Dog&#39;,666.66,150.76,&#39;2018-06-01&#39;), (3,&#39;Parrot&#39;,50.00,8.9,&#39;2018-06-04&#39;), (4,&#39;Hamster&#39;,60.60,12,&#39;2018-06-11&#39;), (5,&#39;Goldfish&#39;,48.48,3.5,&#39;2018-06-14&#39;); INSERT INTO PET VALUES (1,&#39;Cat&#39;,3), (2,&#39;Dog&#39;,4), (3,&#39;Hamster&#39;,2); SELECT * FROM PETSALE; SELECT * FROM PET; 3.6 Guided Exercise: Use the ALTER statement to add, delete, or modify columns in two of the existing tables created in the previous exercise. Add a new QUANTITY column to the PETSALE table and show the altered table. ALTER TABLE PETSALE ADD COLUMN QUANTITY INTEGER; SELECT * FROM PETSALE; Now update the newly added QUANTITY column of the PETSALE table with some values and show all the records of the table. UPDATE PETSALE SET QUANTITY = 9 WHERE ID = 1; UPDATE PETSALE SET QUANTITY = 3 WHERE ID = 2; UPDATE PETSALE SET QUANTITY = 2 WHERE ID = 3; UPDATE PETSALE SET QUANTITY = 6 WHERE ID = 4; UPDATE PETSALE SET QUANTITY = 24 WHERE ID = 5; SELECT * FROM PETSALE; Delete the PROFIT column from the PETSALE table and show the altered table. ALTER TABLE PETSALE DROP COLUMN PROFIT; SELECT * FROM PETSALE; Change the data type to VARCHAR(20) type of the column PET of the table PETSALE and show the altered table. ALTER TABLE PETSALE ALTER COLUMN PET SET DATA TYPE VARCHAR(20); SELECT * FROM PETSALE; If you are using IBM db2: Now verify if the data type of the column PET of the table PETSALE changed to VARCHAR(20) type or not. Click on the 3 bar menu icon in the top left corner and click Explore &gt; Tables. Find the PETSALE table from Schemas by clicking Select All. Click on the PETSALE table to open the Table Definition page of the table. Here, you can see all the current data type of the columns of the PETSALE table. Rename the column PET to ANIMAL of the PETSALE table and show the altered table. ALTER TABLE PETSALE RENAME COLUMN PET TO ANIMAL; SELECT * FROM PETSALE; 3.7 Guided Exercise: TRUNCATE In this exercise, you will use the TRUNCATE statement to remove all rows from an existing table created in exercise 1 without deleting the table itself. Remove all rows from the PET table and show the empty table. TRUNCATE TABLE PET IMMEDIATE; SELECT * FROM PET; 3.8 Guided Exercise: DROP In this exercise, you will use the DROP statement to delete an existing table created in the previous exercise. Delete the PET table and verify if the table still exists or not (SELECT statement wont work if a table doesnt exist). DROP TABLE PET; SELECT * FROM PET; "]]
