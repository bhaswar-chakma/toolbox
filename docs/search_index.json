[["sql.html", "4 SQL 4.1 CREATE 4.2 DROP 4.3 ALTER 4.4 TRUNCATE 4.5 Guided Exercise: Create table and insert data 4.6 Guided Exercise: Use the ALTER statement to add, delete, or modify columns in two of the existing tables created in the previous exercise. 4.7 Guided Exercise: TRUNCATE 4.8 Guided Exercise: DROP 4.9 Exercise: String Patterns 4.10 Exercise: Sorting 4.11 Exercise 3: Grouping", " 4 SQL 4.1 CREATE The general syntax to create a table: create table TABLENAME ( COLUMN1 datatype, COLUMN2 datatype, COLUMN3 datatype, ... ); To create a table called TEST with two columns - ID of type integer, and NAME of type varchar, we could create it using the following SQL statement: create table TEST( ID int NAME varchar(30) ); To create a table called COUNTRY with an ID column, a two letter country code column CCODE, and a variable length country name column NAME: create table COUNTRY( ID int, CCODE char(2), NAME varchar(60) ); Sometimes you may see additional keywords in a create table statement: create table COUNTRY( ID int NOT NULL, CCODE char(2), NAME varchar(60), PRIMARY KEY(ID) ); In the above example the ID column has the NOT NULL constraint added after the datatype - meaning that it cannot contain a NULL or an empty value. If you look at the last row in the create table statement above you will note that we are using ID as a Primary Key and the database does not allow Primary Keys to have NULL values. A Primary Key is a unique identifier in a table, and using Primary Keys can help speed up your queries significantly. If the table you are trying to create already exists in the database, you will get an error indicating table XXX.YYY already exists. To circumvent this error, either create a table with a different name or first DROP the existing table. It is quite common to issue a DROP before doing a CREATE in test and development scenarios. 4.2 DROP The general syntax to drop a table: drop table TABLENAME; For example, to drop the table COUNTRY, we can use the following code: drop table COUNTRY; 4.3 ALTER ALTER TABLE table_name ADD COLUMN column_name data_type column_constraint; ALTER TABLE table_name DROP COLUMN column_name; ALTER TABLE table_name ALTER COLUMN column_name SET DATA TYPE data_type; ALTER TABLE table_name RENAME COLUMN current_column_name TO new_column_name; 4.4 TRUNCATE TRUNCATE TABLE table_name; 4.5 Guided Exercise: Create table and insert data You will to create two tables PETSALE PET. CREATE TABLE PETSALE ( ID INTEGER NOT NULL, PET CHAR(20), SALEPRICE DECIMAL(6,2), PROFIT DECIMAL(6,2), SALEDATE DATE ); CREATE TABLE PET ( ID INTEGER NOT NULL, ANIMAL VARCHAR(20), QUANTITY INTEGER ); Now insert some records into the two newly created tables and show all the records of the two tables. INSERT INTO PETSALE VALUES (1,&#39;Cat&#39;,450.09,100.47,&#39;2018-05-29&#39;), (2,&#39;Dog&#39;,666.66,150.76,&#39;2018-06-01&#39;), (3,&#39;Parrot&#39;,50.00,8.9,&#39;2018-06-04&#39;), (4,&#39;Hamster&#39;,60.60,12,&#39;2018-06-11&#39;), (5,&#39;Goldfish&#39;,48.48,3.5,&#39;2018-06-14&#39;); INSERT INTO PET VALUES (1,&#39;Cat&#39;,3), (2,&#39;Dog&#39;,4), (3,&#39;Hamster&#39;,2); SELECT * FROM PETSALE; SELECT * FROM PET; 4.6 Guided Exercise: Use the ALTER statement to add, delete, or modify columns in two of the existing tables created in the previous exercise. Add a new QUANTITY column to the PETSALE table and show the altered table. ALTER TABLE PETSALE ADD COLUMN QUANTITY INTEGER; SELECT * FROM PETSALE; Now update the newly added QUANTITY column of the PETSALE table with some values and show all the records of the table. UPDATE PETSALE SET QUANTITY = 9 WHERE ID = 1; UPDATE PETSALE SET QUANTITY = 3 WHERE ID = 2; UPDATE PETSALE SET QUANTITY = 2 WHERE ID = 3; UPDATE PETSALE SET QUANTITY = 6 WHERE ID = 4; UPDATE PETSALE SET QUANTITY = 24 WHERE ID = 5; SELECT * FROM PETSALE; Delete the PROFIT column from the PETSALE table and show the altered table. ALTER TABLE PETSALE DROP COLUMN PROFIT; SELECT * FROM PETSALE; Change the data type to VARCHAR(20) type of the column PET of the table PETSALE and show the altered table. ALTER TABLE PETSALE ALTER COLUMN PET SET DATA TYPE VARCHAR(20); SELECT * FROM PETSALE; If you are using IBM db2: Now verify if the data type of the column PET of the table PETSALE changed to VARCHAR(20) type or not. Click on the 3 bar menu icon in the top left corner and click Explore &gt; Tables. Find the PETSALE table from Schemas by clicking Select All. Click on the PETSALE table to open the Table Definition page of the table. Here, you can see all the current data type of the columns of the PETSALE table. Rename the column PET to ANIMAL of the PETSALE table and show the altered table. ALTER TABLE PETSALE RENAME COLUMN PET TO ANIMAL; SELECT * FROM PETSALE; 4.7 Guided Exercise: TRUNCATE In this exercise, you will use the TRUNCATE statement to remove all rows from an existing table created in exercise 1 without deleting the table itself. Remove all rows from the PET table and show the empty table. TRUNCATE TABLE PET IMMEDIATE; SELECT * FROM PET; 4.8 Guided Exercise: DROP In this exercise, you will use the DROP statement to delete an existing table created in the previous exercise. Delete the PET table and verify if the table still exists or not (SELECT statement wont work if a table doesnt exist). DROP TABLE PET; SELECT * FROM PET; 4.9 Exercise: String Patterns In this exercise, you will go through some SQL problems on String Patterns. Here is EMPLOYEES table. EMP_ID F_NAME L_NAME SSN B_DATE E1001 John Thomas 123456 1976-01-09 E1002 Alice James 123457 1972-07-31 E1003 Steve Wells 123458 1980-08-10 E1004 Santosh Kumar 123459 1985-07-20 E1005 Ahmed Hussain 123410 1981-01-04 E1006 Nancy Allen 123411 1978-02-06 E1007 Mary Thomas 123412 1975-05-05 E1008 Bharath Gupta 123413 1985-05-06 E1009 Andrea Jones 123414 1990-07-09 E1010 Ann Jacob 123415 1982-03-30 SEX ADDRESS JOB_ID SALARY MANAGER_ID DEP_ID M 5631 Rice, OakPark,IL 100 100000 30001 2 F 980 Berry ln, Elgin,IL 200 80000 30002 5 M 291 Springs, Gary,IL 300 50000 30002 5 M 511 Aurora Av, Aurora,IL 400 60000 30004 5 M 216 Oak Tree, Geneva,IL 500 70000 30001 2 F 111 Green Pl, Elgin,IL 600 90000 30001 2 F 100 Rose Pl, Gary,IL 650 65000 30003 7 M 145 Berry Ln, Naperville,IL 660 65000 30003 7 F 120 Fall Creek, Gary,IL 234 70000 30003 7 F 111 Britany Springs,Elgin,IL 220 70000 30004 5 4.9.1 Retrieve all employees whose address is in Elgin,IL. Click here for the solution SELECT F_NAME , L_NAME FROM EMPLOYEES WHERE ADDRESS LIKE &#39;%Elgin,IL%&#39;; 4.9.2 Retrieve all employees who were born during the 1970s.. Click here for the solution SELECT F_NAME , L_NAME FROM EMPLOYEES WHERE B_DATE LIKE &#39;197%&#39;; 4.9.3 Retrieve all employees in department 5 whose salary is between 60000 and 70000.. Click here for the solution SELECT F_NAME , L_NAME FROM EMPLOYEES WHERE DEP_ID = 5 and (SALARY BETWEEN 60000 AND 70000); --Notice the &quot;=&quot; and &quot;and&quot; 4.10 Exercise: Sorting 4.10.1 Retrieve a list of employees ordered by department ID.. Click here for the solution SELECT F_NAME, L_NAME, DEP_ID FROM EMPLOYEES ORDER BY DEP_ID; 4.10.2 Retrieve a list of employees ordered in descending order by department ID and within each department ordered alphabetically in descending order by last name.. Click here for the solution SELECT F_NAME, L_NAME, DEP_ID FROM EMPLOYEES ORDER BY DEP_ID DESC, L_NAME DESC; 4.10.3 In the previous problem, use department name instead of department ID. Retrieve a list of employees ordered by department name, and within each department ordered alphabetically in descending order by last name.. Here is the DEPARTMENTS table. DEPT_ID_DEP DEP_NAME MANAGER_ID LOC_ID 2 Architect Group 30001 L0001 5 Software Group 30002 L0002 7 Design Team 30003 L0003 Click here for the solution SELECT D.DEP_NAME , E.F_NAME, E.L_NAME FROM EMPLOYEES as E, DEPARTMENTS as D WHERE E.DEP_ID = D.DEPT_ID_DEP ORDER BY D.DEP_NAME, E.L_NAME DESC; In the SQL Query above, D and E are aliases for the table names. Once you define an alias like D in your query, you can simply write D.COLUMN_NAME rather than the full form DEPARTMENTS.COLUMN_NAME. 4.11 Exercise 3: Grouping 4.11.1 For each department ID retrieve the number of employees in the department.. Click here for the solution SELECT DEP_ID, COUNT(*) FROM EMPLOYEES GROUP BY DEP_ID; 4.11.2 For each department retrieve the number of employees in the department, and the average employee salary in the department.. Click here for the solution SELECT DEP_ID, COUNT(*), AVG(SALARY) FROM EMPLOYEES GROUP BY DEP_ID; 4.11.3 Label the computed columns in the result set of the last SQL problem as NUM_EMPLOYEES and AVG_SALARY.. Click here for the solution SELECT DEP_ID, COUNT(*) AS &quot;NUM_EMPLOYEES&quot;, AVG(SALARY) AS &quot;AVG_SALARY&quot; FROM EMPLOYEES GROUP BY DEP_ID; 4.11.4 In the previous SQL problem , order the result set by Average Salary.. Click here for the solution SELECT DEP_ID, COUNT(*) AS &quot;NUM_EMPLOYEES&quot;, AVG(SALARY) AS &quot;AVG_SALARY&quot; FROM EMPLOYEES GROUP BY DEP_ID ORDER BY AVG_SALARY; 4.11.5 In SQL problem 4 (Exercise 3 Problem 4), limit the result to departments with fewer than 4 employees.. Click here for the solution SELECT DEP_ID, COUNT(*) AS &quot;NUM_EMPLOYEES&quot;, AVG(SALARY) AS &quot;AVG_SALARY&quot; FROM EMPLOYEES GROUP BY DEP_ID HAVING count(*) &lt; 4 ORDER BY AVG_SALARY; "]]
