[["missing-values-and-duplicates.html", "5 Missing Values and Duplicates 5.1 Missing Values", " 5 Missing Values and Duplicates 5.1 Missing Values 5.1.1 tidyr::drop_na() vs pd.dropna() and pd.notpna() name age A 21 B NA NA NA D 40 How to drop missing rows or columns? tidyr::drop_na() pd.dropna() and pd.notna() # toy data df &lt;- tibble( name = c(&#39;A&#39;, &#39;B&#39;, NA, &#39;D&#39;), age = c(21, NA, NA, 40) ) df ## # A tibble: 4 x 2 ## name age ## &lt;chr&gt; &lt;dbl&gt; ## 1 A 21 ## 2 B NA ## 3 &lt;NA&gt; NA ## 4 D 40 # drop missing rows df %&gt;% drop_na() ## # A tibble: 2 x 2 ## name age ## &lt;chr&gt; &lt;dbl&gt; ## 1 A 21 ## 2 D 40 # drop specific variable # with NaN df %&gt;% drop_na(name) ## # A tibble: 3 x 2 ## name age ## &lt;chr&gt; &lt;dbl&gt; ## 1 A 21 ## 2 B NA ## 3 D 40 # toy data df = pd.DataFrame({ &#39;name&#39;: [ &#39;A&#39;, &#39;B&#39;, np.nan, &#39;D&#39; ], &#39;age&#39;: [ 21, np.nan, np.nan, 40 ] }) df ## name age ## 0 A 21.0 ## 1 B NaN ## 2 NaN NaN ## 3 D 40.0 # drop missing rows df.dropna() ## name age ## 0 A 21.0 ## 3 D 40.0 # drop specific variable # with NaN df[df[&#39;name&#39;].notna()] ## name age ## 0 A 21.0 ## 1 B NaN ## 3 D 40.0 "]]
