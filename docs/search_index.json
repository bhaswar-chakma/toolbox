[["sql.html", "7 SQL 7.1 CREATE 7.2 UPDATE 7.3 DELETE 7.4 Grammar (dplyr vs SQL)", " 7 SQL 7.1 CREATE DROP TABLE students; --- create toy table: students CREATE TABLE students (student_id CHAR(5) NOT NULL, name VARCHAR(10), gender VARCHAR(6), grade INT, PRIMARY KEY (student_id)); -- insert data INSERT INTO students VALUES (&#39;SQ001&#39;, &#39;Barney&#39;, &#39;Male&#39;, 18), (&#39;SQ002&#39;, &#39;Robin&#39;, &#39;Female&#39;, 17), (&#39;SQ007&#39;, &#39;Sheldon&#39;, &#39;Male&#39;, 20), (&#39;SQ008&#39;, &#39;Penny&#39;, &#39;Female&#39;, 13); student_id name gender grade S1 Barney Male 18 S2 Robin Female 17 S7 Sheldon Male 20 S8 Penny Female 13 7.2 UPDATE -- Change the grade for Robin to 11 UPDATE students SET grade = 11 WHERE student_id = &#39;S2&#39;; student_id name gender grade S1 Barney Male 18 S2 Robin Female 11 S7 Sheldon Male 20 S8 Penny Female 13 7.3 DELETE -- Delete the row for Penny DELETE FROM students where student_id = &#39;S8&#39; student_id name gender grade S1 Barney Male 18 S2 Robin Female 11 S7 Sheldon Male 20 7.4 Grammar (dplyr vs SQL) 7.4.1 select() dplyr SQL # all columns students # select name and grade students %&gt;% select(name, gender) -- select all columns SELECT * FROM students -- select name and grade SELECT name, grade FROM students 7.4.2 mutate() dplyr SQL # new variable: grade_percent # expressing grade out of 100 students %&gt;% mutate( grade_percent = grade/20 * 100 ) -- new variable: grade_percent -- expressing grade out of 100 SELECT (grade/20.0 * 100) AS grade_percent FROM students; 7.4.3 filter() dplyr SQL # keep if gender is female # or student is Sheldon students %&gt;% filter( name == &#39;Sheldon&#39; | gender == &#39;Female&#39; ) 7.4.4 summarise() with group_by() dplyr SQL # grouped by gender, # find average grade students %&gt;% group_by(gender) %&gt;% summarise(avg_grade = mean(grade)) -- grouped by gender, -- find average grade SELECT gender, AVG(grade) AS avg_grade FROM students GROUP BY gender; 7.4.5 arrange() dplyr SQL # sort name # in descending order students %&gt;% arrange(desc(name)) -- sort name -- in descending order SELECT * FROM students ORDER BY name DESC; "]]
