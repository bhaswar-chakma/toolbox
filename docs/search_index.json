[["reshape-tidyr-vs-pandas.html", "3 Reshape: tidyr vs pandas 3.1 pivot_longer() vs melt() 3.2 pivot_wider vs pivot 3.3 pandas:: stack() 3.4 pandas:: unstack()", " 3 Reshape: tidyr vs pandas 3.1 pivot_longer() vs melt() 3.1.1 Example: Life Expectancy data in wide format country 1997 2007 Bangladesh 59.4 64.1 Portugal 76.0 78.1 How do we make the table long? Desired output: country year life_exp Bangladesh 1997 59.4 Bangladesh 2007 64.1 Portugal 1997 76.0 Portugal 2007 78.1 tidyr::pivot_longer pandas::melt() # toy data df &lt;- tibble( country = c(&quot;Bangladesh&quot;, &quot;Portugal&quot;), `1997` = c(59.4, 76.0), `2007` = c(64.1, 78.1) ) df ## # A tibble: 2 x 3 ## country `1997` `2007` ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Bangladesh 59.4 64.1 ## 2 Portugal 76 78.1 pivot_longer() in action! # pivot_longer in action df %&gt;% pivot_longer( cols = c(`1997`, `2007`), names_to = &quot;year&quot;, values_to = &quot;life_exp&quot; ) # toy data data = { &#39;country&#39;: [&quot;Bangladesh&quot;, &quot;Portugal&quot;], &#39;1997&#39;: [59.4, 76.0], &#39;2007&#39;: [64.1, 78.1] } df = pd.DataFrame(data) df ## country 1997 2007 ## 0 Bangladesh 59.4 64.1 ## 1 Portugal 76.0 78.1 melt() in action! # melt() in action df.melt( id_vars = &#39;country&#39;, value_vars = [&#39;1997&#39;, &#39;2007&#39;], # cols var_name = &#39;year&#39;, # names_to value_name = &#39;life_exp&#39; # values_to ) 3.2 pivot_wider vs pivot 3.2.1 Example: Life Expectancy data in long format country year life_exp Bangladesh 1997 59.4 Bangladesh 2007 64.1 Portugal 1997 76.0 Portugal 2007 78.1 How do we make the table wide? Desired output: country 1997 2007 Bangladesh 59.4 64.1 Portugal 76.0 78.1 tidyr::pivot_wider() pandas::pivot() # toy data country &lt;- c( &quot;Bangladesh&quot;, &quot;Bangladesh&quot;, &quot;Portugal&quot;, &quot;Portugal&quot; ) year &lt;- c( &quot;1997&quot;, &quot;2007&quot;, &quot;1997&quot;, &quot;2007&quot; ) life_exp &lt;- c( 59.4, 64.1, 76, 78.1 ) df &lt;- tibble(country, year, life_exp) df ## # A tibble: 4 x 3 ## country year life_exp ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Bangladesh 1997 59.4 ## 2 Bangladesh 2007 64.1 ## 3 Portugal 1997 76 ## 4 Portugal 2007 78.1 pivot_wider() in action! # pivot_wider in action df %&gt;% pivot_wider( names_from = &quot;year&quot;, values_from = &quot;life_exp&quot; ) ## # A tibble: 2 x 3 ## country `1997` `2007` ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Bangladesh 59.4 64.1 ## 2 Portugal 76 78.1 # toy data country =[ &quot;Bangladesh&quot;, &quot;Bangladesh&quot;, &quot;Portugal&quot;, &quot;Portugal&quot; ] year = [ &quot;1997&quot;, &quot;2007&quot;, &quot;1997&quot;, &quot;2007&quot; ] life_exp = [ 59.4, 64.1, 76, 78.1 ] df = pd.DataFrame( {&#39;country&#39;: country, &#39;year&#39;: year, &#39;life_exp&#39;: life_exp} ) df ## country year life_exp ## 0 Bangladesh 1997 59.4 ## 1 Bangladesh 2007 64.1 ## 2 Portugal 1997 76.0 ## 3 Portugal 2007 78.1 pivot() in action! # pivot in action df_wide = df.pivot( index = &#39;country&#39;, columns = &#39;year&#39;, # names from values = &#39;life_exp&#39; # vasles from ) df_wide ## year 1997 2007 ## country ## Bangladesh 59.4 64.1 ## Portugal 76.0 78.1 # Reset the names df_wide.index.name = None df_wide.columns.name = None df_wide ## 1997 2007 ## Bangladesh 59.4 64.1 ## Portugal 76.0 78.1 3.3 pandas:: stack() # toy data df = pd.DataFrame({ &#39;year&#39;: np.arange(2020,2025), &#39;Fall&#39;: np.linspace(10,15,5), &#39;Spring&#39;: np.linspace(1, 5,5) }) df ## year Fall Spring ## 0 2020 10.00 1.0 ## 1 2021 11.25 2.0 ## 2 2022 12.50 3.0 ## 3 2023 13.75 4.0 ## 4 2024 15.00 5.0 How to create MultiIndex series? # step 1: set year as index df.set_index(&#39;year&#39;, inplace = True) df ## Fall Spring ## year ## 2020 10.00 1.0 ## 2021 11.25 2.0 ## 2022 12.50 3.0 ## 2023 13.75 4.0 ## 2024 15.00 5.0 # step 2: apply stack() df_stacked = df.stack() df_stacked ## year ## 2020 Fall 10.00 ## Spring 1.00 ## 2021 Fall 11.25 ## Spring 2.00 ## 2022 Fall 12.50 ## Spring 3.00 ## 2023 Fall 13.75 ## Spring 4.00 ## 2024 Fall 15.00 ## Spring 5.00 ## dtype: float64 # check type type(df_stacked) ## &lt;class &#39;pandas.core.series.Series&#39;&gt; # check index df_stacked.index ## MultiIndex([(2020, &#39;Fall&#39;), ## (2020, &#39;Spring&#39;), ## (2021, &#39;Fall&#39;), ## (2021, &#39;Spring&#39;), ## (2022, &#39;Fall&#39;), ## (2022, &#39;Spring&#39;), ## (2023, &#39;Fall&#39;), ## (2023, &#39;Spring&#39;), ## (2024, &#39;Fall&#39;), ## (2024, &#39;Spring&#39;)], ## names=[&#39;year&#39;, None]) 3.4 pandas:: unstack() # toy data year = [2010, 2010, 2010, 2020, 2020, 2020] name = [&quot;X&quot;, &quot;Y&quot;, &quot;Z&quot;, &quot;X&quot;, &quot;Y&quot;, &quot;Z&quot;] gender = [&quot;M&quot;, &quot;F&quot;, &quot;F&quot;, &quot;M&quot;, &quot;F&quot;, &quot;F&quot;] grade = [10, 10, 20, 20, 12.5, 17.5] df = pd.DataFrame( { &#39;year&#39;: year, &#39;name&#39;: name, &#39;gender&#39;: gender, &#39;grade&#39;: grade } ) df ## year name gender grade ## 0 2010 X M 10.0 ## 1 2010 Y F 10.0 ## 2 2010 Z F 20.0 ## 3 2020 X M 20.0 ## 4 2020 Y F 12.5 ## 5 2020 Z F 17.5 Suppose we want to find mean grade grouped by year and gender. # grouped by year and gender: # find mean grade df_stat = df.groupby( [&#39;year&#39;, &#39;gender&#39;] ).agg({ &#39;grade&#39;: [&#39;mean&#39;] }) df_stat ## grade ## mean ## year gender ## 2010 F 15.0 ## M 10.0 ## 2020 F 15.0 ## M 20.0 How to get F and M as columns? Just apply unstack() df_unstacked = df_stat.unstack() df_unstacked ## grade ## mean ## gender F M ## year ## 2010 15.0 10.0 ## 2020 15.0 20.0 # To change the names # reset index df_unstacked2 = df_unstacked.reset_index() # rename df_unstacked2.columns = [&#39;year&#39;, &#39;M&#39;, &#39;F&#39;] df_unstacked2 ## year M F ## 0 2010 15.0 10.0 ## 1 2020 15.0 20.0 "]]
