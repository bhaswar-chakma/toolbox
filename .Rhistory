install.packages("gtsummary")
reticulate::repl_python()
import pandas as pd
# Toy Data
df <- pd.DataFrame({name: ['Ted', 'Barney', 'Marshall','Robin', 'Lily'],
gender:['Male','Male','Male', 'Female', 'Female']})
quit
reticulate::repl_python()
import pandas as pd
# Toy Data
df = pd.DataFrame({name: ['Ted', 'Barney', 'Marshall','Robin', 'Lily'],
gender:['Male','Male','Male', 'Female', 'Female']})
quit
reticulate::repl_python()
import pandas as pd
# Toy Data
df = pd.DataFrame({'name': ['Ted', 'Barney', 'Marshall','Robin', 'Lily'],
'gender':['Male','Male','Male', 'Female', 'Female']})
quit
reticulate::repl_python()
import pandas as pd
# Toy Data
df = pd.DataFrame({'name': ['Ted', 'Barney', 'Marshall','Robin', 'Lily'],
'gender':['Male','Male','Male', 'Female', 'Female']})
df.head()
reticulate::repl_python()
print(data.index)
quit
library(reticulate)
reticulate::repl_python()
print(data.index)
quit
reticulate::repl_python()
data = pd.Series([0.25, 0.5, 0.75, 1.0])
print(data)
print(type(data))
print(data.values)
print(type(data.values))
quit
reticulate::repl_python()
import numpy as np
import pandas as pd
quit
reticulate::repl_python()
print(data.index)
quit
reticulate::repl_python()
data = pd.Series([0.25, 0.5, 0.75, 1.0])
print(data)
print(type(data))
print(data.values)
print(type(data.values))
quit
reticulate::repl_python()
print(data.index)
quit
reticulate::repl_python()
type(print(type(data.values)))
quit
reticulate::repl_python()
print(data)
print(date[1])
quit
reticulate::repl_python()
print(data)
print(data[1])
quit
reticulate::repl_python()
data = pd.Series([0.25, 0.5, 0.75, 1.0])
print(data)
print(type(data)) # data type
print(data.values) # data values
print(type(data.values)) # The values attribute of the series is a numpy array.
print(data.index)
print(type(data.index)) # the row names are known as the index
quit
reticulate::repl_python()
# remember, dictionary construction uses curly braces {}
samp_dict = {'Tony Stark': "Robert Downey Jr.",
'Steve Rogers': "Chris Evans",
'Natasha Romanoff': "Scarlett Johansson",
'Bruce Banner': "Mark Ruffalo",
'Thor': "Chris Hemsworth",
'Clint Barton': "Jeremy Renner"}
samp_series = pd.Series(samp_dict)
samp_series
quit
reticulate::repl_python()
print(samp_series.index) # dtype = object is for strings but allows mixed data types.
quit
reticulate::repl_python()
avengers = pd.DataFrame({'actor': samp_series,
'hero name': hero_names,
'age': ages})
# the DataFrame will match the indices and sort them
print(avengers)
quit
reticulate::repl_python()
avengers = pd.DataFrame({'actor': samp_series,'hero name': hero_names,'age': ages})
# the DataFrame will match the indices and sort them
print(avengers)
quit
reticulate::repl_python()
import numpy as np
import pandas as pd
quit
reticulate::repl_python()
avengers = pd.DataFrame({'actor': samp_series,
'hero name': hero_names,
'age': ages})
# the DataFrame will match the indices and sort them
print(avengers)
quit
reticulate::repl_python()
# remember, dictionary construction uses curly braces {}
samp_dict = {'Tony Stark': "Robert Downey Jr.",
'Steve Rogers': "Chris Evans",
'Natasha Romanoff': "Scarlett Johansson",
'Bruce Banner': "Mark Ruffalo",
'Thor': "Chris Hemsworth",
'Clint Barton': "Jeremy Renner"}
samp_series = pd.Series(samp_dict)
samp_series
quit
reticulate::repl_python()
print(samp_series.index) # dtype = object is for strings but allows mixed data types.
samp_series.values
quit
reticulate::repl_python()
# ages during the First Avengers film (2012)
age_dict = {'Thor': 1493,
'Steve Rogers': 104,
'Natasha Romanoff': 28,
'Clint Barton': 41,
'Tony Stark': 42,
'Bruce Banner': 42} # note that the dictionary order is not same here
ages = pd.Series(age_dict)
print(ages)
quit
reticulate::repl_python()
# ages during the First Avengers film (2012)
hero_dict = {'Thor': np.NaN,
'Steve Rogers': 'Captain America',
'Natasha Romanoff': 'Black Widow',
'Clint Barton': 'Hawkeye',
'Tony Stark': 'Iron Man',
'Bruce Banner': 'Hulk'}
hero_names = pd.Series(hero_dict)
print(hero_names)
quit
reticulate::repl_python()
avengers = pd.DataFrame({'actor': samp_series,
'hero name': hero_names,
'age': ages})
# the DataFrame will match the indices and sort them
print(avengers)
quit
reticulate::repl_python()
print(samp_series)
avengers = pd.DataFrame({'actor': samp_series,
'hero name': hero_names,
'age': ages})
# the DataFrame will match the indices and sort them
print(avengers)
quit
reticulate::repl_python()
samp_series
quit
reticulate::repl_python()
type(samp_series)
quit
reticulate::repl_python()
# Now create data frame with using those series
avengers = pd.DataFrame({'actor': samp_series, 'hero name': hero_names, 'age': ages})
# the DataFrame will match the indices and sort them
print(avengers)
quit
reticulate::repl_python()
data4 = {'a': [1, 2, 3, 4], 'b': ['x','y','z']} # arrays are not of the same length
pd.DataFrame(data4)
np.random.randint(10, size = 10)
np.random.randint(10, size = 10).reshape(2,5)
quit
reticulate::repl_python()
print(avengers)
quit
reticulate::repl_python()
print(avengers.columns)
quit
reticulate::repl_python()
print(avengers.index)
quit
reticulate::repl_python()
print(avengers)
quit
reticulate::repl_python()
avengers.actor[1] # 0 based indexing
avengers.actor[avengers.age == 42]
avengers["hero name"]['Steve Rogers']
avengers["hero name"]['Steve Rogers':'Tony Stark']
quit
reticulate::repl_python()
avengers.loc['Thor'] # subset based on location to get a row
quit
reticulate::repl_python()
print(type(avengers.loc['Thor']))
print(type(avengers.loc['Thor'].values))  # the values are of mixed type but is still a numpy array.
# this is possible because it is a structured numpy array. (covered in "Python for Data Science" chapter 2)
quit
reticulate::repl_python()
print(avengers) # just for ease of inspection
quit
reticulate::repl_python()
avengers.iloc[3,] # subset based on index location
quit
reticulate::repl_python()
avengers.iloc[0, 1] # pair of coordinates
quit
reticulate::repl_python()
# set values individually
avengers.loc['Thor', 'age'] = 1500
avengers.loc['Thor', 'hero name'] = 'Thor'
avengers
quit
reticulate::repl_python()
# set values individually
avengers.loc['Thor', 'age'] = 1500
avengers.loc[4, 'hero name'] = 'Thor'
avengers
quit
reticulate::repl_python()
# set values individually
avengers.loc['Thor', 'age'] = 1500
avengers.iloc[4, 'hero name'] = 'Thor'
avengers
quit
# set values individually
reticulate::repl_python()
avengers.loc['Thor', 'age'] = 1500
reticulate::repl_python()
avengers.loc['Thor', 'hero name'] = 'Thor'
avengers
quit
reticulate::repl_python()
print(avengers) # just for ease of inspection
quit
reticulate::repl_python()
df.loc[1, :]
quit
reticulate::repl_python()
data = [{'a': 11, 'b': 2},
{'a': 12, 'b': 4},
{'a': 13, 'b': 6}]
df = pd.DataFrame(data, index = [1, 2, 3])
df
quit
reticulate::repl_python()
df.loc[1, :]
quit
reticulate::repl_python()
df.iloc[1, :]
quit
reticulate::repl_python()
print(avengers) # just for ease of inspection
quit
reticulate::repl_python()
print(avengers) # just for ease of inspection
quit
reticulate::repl_python()
# select avengers whose age is less than 50 and greater than 40
# select the columns 'hero name' and 'age'
avengers.loc[ (avengers.age < 50) & (avengers.age > 40), ['hero name', 'age']]
quit
reticulate::repl_python()
# Use the index of the DataFrame, treat it as a string, and select rows that start with B
avengers.loc[ avengers.index.str.startswith('B'), : ]
quit
reticulate::repl_python()
print(avengers) # just for ease of inspection
quit
reticulate::repl_python()
# ages during the First Avengers film (2012)
hero_dict = {'Thor': np.NaN,
'Steve Rogers': 'Captain America',
'Natasha Romanoff': 'Black Widow',
'Clint Barton': 'Hawkeye',
'Tony Stark': 'Iron Man',
'Bruce Banner': 'Hulk'}
hero_names = pd.Series(hero_dict)
print(hero_names)
quit
reticulate::repl_python()
# ages during the First Avengers film (2012)
age_dict = {'Thor': 1493,
'Steve Rogers': 104,
'Natasha Romanoff': 28,
'Clint Barton': 41,
'Tony Stark': 42,
'Bruce Banner': 42} # note that the dictionary order is not same here
ages = pd.Series(age_dict)
print(ages)
quit
reticulate::repl_python()
# Now create data frame using those series
avengers = pd.DataFrame({'actor': samp_series, 'hero name': hero_names, 'age': ages})
# the DataFrame will match the indices and sort them
print(avengers)
print(type(avengers)) # this is a DataFrame object
quit
reticulate::repl_python()
# select avengers whose age is less than 50 and greater than 40
# select the columns 'hero name' and 'age'
avengers.loc[ (avengers.age < 50) & (avengers.age > 40), ['hero name', 'age']]
quit
reticulate::repl_python()
print(avengers) # just for ease of inspection
quit
reticulate::repl_python()
# Use the index of the DataFrame, treat it as a string, and select rows that start with B
avengers.loc[ avengers.index.str.startswith('B'), : ]
quit
reticulate::repl_python()
# Use the index of the DataFrame, treat it as a string,
# find the character capital R. Find returns -1 if it does not find the letter
# We select rows that did not result in -1, which means it does contain a capital R
avengers.loc[ avengers.index.str.find('R') != -1, : ]
quit
# Use the index of the DataFrame, treat it as a string,
# find the character capital R. Find returns -1 if it does not find the letter
# We select rows that did not result in -1, which means it does contain a capital R
avengers.loc[ avengers.index.str.find('X') != -1, : ]
reticulate::repl_python()
# Titanic Dataset
url = 'https://assets.datacamp.com/production/course_1607/datasets/titanic_sub.csv'
titanic = pd.read_csv(url)
quit
reticulate::repl_python()
titanic
quit
reticulate::repl_python()
titanic.index
