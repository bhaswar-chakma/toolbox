# reshape: long
df.melt(
id_vars = 'country',
value_vars = ['1997', '2007'],
value_name = 'life_exp'
var_name = 'year'
)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(dplyr)
reticulate::repl_python()
import pandas as pd
import numpy as np
quit
df <- tibble(
name = c("Barney", "Ted", "Marshall",
"Lilly","Robin"),
gender = c("Male", "Male","Male",
"Female", "Female"),
grade = c(10, 11, 13, 12, 14)
)
df
knitr::kable(df)
reticulate::repl_python()
df = pd.DataFrame({
'name':["Barney", "Ted", "Marshall",
"Lilly", "Robin"],
'gender':["Male", "Male","Male",
"Female", "Female"],
'grade':[10, 11, 13, 12, 14]
})
df
quit
reticulate::repl_python()
df[df.columns[1, 2]]
quit
reticulate::repl_python()
df[df.columns[1, 2]]
quit
reticulate::repl_python()
df[df.columns[1, 2]]
quit
reticulate::repl_python()
df[df.columns[1, 2]]
quit
df[df.columns[[0,2]]]
reticulate::repl_python()
df[df.columns[[0,2]]]
quit
reticulate::repl_python()
# or
df.drop(['gender'], axis = 1)
1.15*1.15
library(dplyr)
library(tidyr)
library(dplyr)
library(tidyr)
library(reticulate)
tibble(
country = c("BD", "PT",
"ES", "FR")
)
tibble(
country_code = c("BD", "PT",
"ES", "FR")
) %>%
knitr::kable()
# toy data
df <- tibble(
country_code = c("BD", "PT",
"ES", "FR",
"DE", "DK")
)
# toy data
df <- tibble(
country_code = c("BD", "PT",
"ES", "FR",
"DE", "DK")
)
df
# toy data
df <- tibble(
country_code = c("BD", "PT",
"ES", "FR",
"DE", "DK")
)
df
# %in% in action
df %>%
filter(country %in% c("BD", "PT"))
# toy data
df <- tibble(
country_code = c("BD", "PT",
"ES", "FR",
"DE", "DK")
)
df
# %in% in action
df %>%
filter(country_code %in% c("BD", "PT"))
# toy data
df <- tibble(
country_code = c("BD", "PT",
"ES", "FR",
"DE", "DK")
)
df
# %in% in action
df %>%
filter(country_code %in% c("BD", "PT"))
# toy data
df <- tibble(
code = c("BD", "PT",
"ES", "FR",
"DE", "DK")
)
df
# %in% in action
df %>%
filter(code %in% c("BD", "PT"))
reticulate::repl_python()
# toy data
data = {'code': ["BD", "PT",
"ES", "FR",
"DE", "DK"]}
df = pd.DataFrame(data)
df
quit
reticulate::repl_python()
# toy data
data = {'code': ["BD", "PT",
"ES", "FR",
"DE", "DK"]}
df = pd.DataFrame(data)
df
quit
reticulate::repl_python()
import pandas as pd
import numpy as np
quit
reticulate::repl_python()
# toy data
data = {'code': ["BD", "PT",
"ES", "FR",
"DE", "DK"]}
df = pd.DataFrame(data)
df
quit
reticulate::repl_python()
# toy data
data = {'code': ["BD", "PT",
"ES", "FR",
"DE", "DK"]}
df = pd.DataFrame(data)
df
# isin in action
df[df['code'] isin ["BD", "PT"]]
quit
reticulate::repl_python()
# toy data
data = {'code': ["BD", "PT",
"ES", "FR",
"DE", "DK"]}
df = pd.DataFrame(data)
df
# isin in action
df[df['code'].isin ["BD", "PT"]]
quit
reticulate::repl_python()
# toy data
data = {'code': ["BD", "PT",
"ES", "FR",
"DE", "DK"]}
df = pd.DataFrame(data)
df
# isin in action
df[df['code'].isin(["BD", "PT"]]
quit
reticulate::repl_python()
# toy data
data = {'code': ["BD", "PT",
"ES", "FR",
"DE", "DK"]}
df = pd.DataFrame(data)
df
# isin in action
df[df['code'].isin(["BD", "PT"]]
quit
reticulate::repl_python()
# isin in action
df[df['code'].isin(["BD", "PT"]]
quit
# toy data
df <- tibble(
# country code
code = c(
"BD", "PT",
"ES", "FR"
),
# capital
capital = c(
"Dhaka", "Lisbon",
"Madrid", "Paris"
)
)
df
# %in% in action
df %>%
filter(code %in% c("BD", "PT"))
# %in% in action
df %>%
filter(code %in% c("BD", "PT"))
tibble(
country_code = c("BD", "PT",
"ES", "FR")
) %>%
df %>%   knitr::kable()
tibble(
country_code = c("BD", "PT",
"ES", "FR")
) %>%
df %>%   knitr::kable()
tibble(
country_code = c("BD", "PT",
"ES", "FR")
) %>%
df %>% knitr::kable()
# toy data
df <- tibble(
# country code
code = c(
"BD", "PT",
"ES", "FR"
),
# capital
capital = c(
"Dhaka", "Lisbon",
"Madrid", "Paris"
)
)
df
tibble(
country_code = c("BD", "PT",
"ES", "FR")
) %>%
df %>% knitr::kable()
tibble(
country_code = c("BD", "PT",
"ES", "FR")
) %>%
knitr::kable(df)
df
df %>%
knitr::kable()
reticulate::repl_python()
# isin in action
df[df["code"].isin(["BD", "PT"])]
quit
reticulate::repl_python()
country_list = ["BD", "PT"]
# @ in action
df.query('code == @country_list')
quit
reticulate::repl_python()
df.query('code in ["BD", "PT"]')
quit
reticulate::repl_python()
# toy data
data = {
# country code
'code':[
"BD", "PT",
"ES", "FR"
],
# capital
'capital':[
"Dhaka", "Lisbon",
"Madrid", "Paris"
]
}
df = pd.DataFrame(data)
df
quit
reticulate::repl_python()
# isin in action
df[df["code"].isin(["BD", "PT"])]
quit
reticulate::repl_python()
country_list = ["BD", "PT"]
# @ in action
df.query('code == @country_list')
# note: you must create a list first
# @["BD", "PT"] doesn't work
quit
reticulate::repl_python()
df.query('code in ["BD", "PT"]')
quit
df <- tibble(
country = c("Bangladesh", "Portugal"),
`1997` = c(59.4, 76.0),
`2007` = c(64.1, 78.1)
)
df
# pivot_longer in action
df %>%
pivot_longer(
cols = c(`1997`, `2007`),
names_to = "year",
values_to = "life_exp"
)
# pivot_longer in action
df <- df %>%
pivot_longer(
cols = c(`1997`, `2007`),
names_to = "year",
values_to = "life_exp"
)
dput(df)
df <- tibble(country, year, life_exp)
country <- c(
"Bangladesh", "Bangladesh",
"Portugal", "Portugal"
)
country <- c(
"Bangladesh", "Bangladesh",
"Portugal", "Portugal"
)
year <- c(
"1997", "2007",
"1997", "2007"
)
life_exp <- c(
59.4, 64.1,
76, 78.1
)
df <- tibble(country, year, life_exp)
df
df
df <- tibble(
country = c("Bangladesh", "Portugal"),
`1997` = c(59.4, 76.0),
`2007` = c(64.1, 78.1)
)
df
dput(df)
knitr::kable(df)
# pivot_wider in action
# pivot_longer in action
df %>%
pivot_wider(
names_from = "year",
values_from = "life_exp"
)
# toy data
country <- c(
"Bangladesh", "Bangladesh",
"Portugal", "Portugal"
)
year <- c(
"1997", "2007",
"1997", "2007"
)
life_exp <- c(
59.4, 64.1,
76, 78.1
)
df <- tibble(country, year, life_exp)
df
# pivot_wider in action
# pivot_longer in action
df %>%
pivot_wider(
names_from = "year",
values_from = "life_exp"
)
reticulate::repl_python()
# toy data
country =[
"Bangladesh", "Bangladesh",
"Portugal", "Portugal"
]
year = [
"1997", "2007",
"1997", "2007"
]
life_exp = [
59.4, 64.1,
76, 78.1
]
df = pd.DataFrame(
{'country': country,
'year': year,
'life_exp': life_exp}
)
df
quit
reticulate::repl_python()
# Fix the names
# 1. reset the index
df_wider.reset_index()
quit
reticulate::repl_python()
# Fix the names
# 1. reset the index
df_wider.reset_index()
quit
reticulate::repl_python()
# output looks different
#   due to index and column names
# Check name
df_wider.index
df_wider.columns
quit
reticulate::repl_python()
# pivot in action
df_wider = df.pivot(
index = 'country',
columns = 'year', # names from
values = 'life_exp' # vasles from
)
df_wider
quit
reticulate::repl_python()
# output looks different
#   due to index and column names
# Check name
df_wider.index
df_wider.columns
quit
reticulate::repl_python()
# Fix the names
# 1. reset the index
df_wider.reset_index()
quit
reticulate::repl_python()
# Fix the names
# 1. reset the index
df_wider.reset_index()
quit
reticulate::repl_python()
# Fix the names
# reset the index
df_wider = df_wider.reset_index()
df_wider
#
quit
reticulate::repl_python()
# reset the index
df_wider = df_wider.reset_index()
df_wider
# change index name
df_wider.index.name = None
df_wider
quit
reticulate::repl_python()
# toy data
country =[
"Bangladesh", "Bangladesh",
"Portugal", "Portugal"
]
year = [
"1997", "2007",
"1997", "2007"
]
life_exp = [
59.4, 64.1,
76, 78.1
]
df = pd.DataFrame(
{'country': country,
'year': year,
'life_exp': life_exp}
)
df
quit
reticulate::repl_python()
# pivot in action
df_wider = df.pivot(
index = 'country',
columns = 'year', # names from
values = 'life_exp' # vasles from
)
df_wider
quit
reticulate::repl_python()
# reset the index
df_wider = df_wider.reset_index()
df_wider
# change index name
df_wider.index.name = None
df_wider
quit
reticulate::repl_python()
# pivot in action
df_wide = df.pivot(
index = 'country',
columns = 'year', # names from
values = 'life_exp' # vasles from
)
df_wide
quit
reticulate::repl_python()
# Reset the names
df_wide.index.name = None
df_wide.columns.name = None
quit
reticulate::repl_python()
# Reset the names
df_wide.index.name = None
df_wide.columns.name = None
quit
reticulate::repl_python()
df_wide
