}
)
quit
reticulate::repl_python()
df[['gender', 'grade']].groupby("gender").agg(
# provide a dictionary
{# variable name followed by function
'mean': 'mean',
'median': 'median',
'min': 'min',
'max': 'max'
}
)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
df %>%
arrange(grade)
library(dplyr)
reticulate::repl_python()
import pandas as pd
quit
quit
df <- tibble(
name = c("Barney", "Ted", "Marshall",
"Lilly","Robin"),
gender = c("Male", "Male","Male",
"Female", "Female"),
grade = c(10, 11, 13, 12, 14)
)
df
df <- tibble(
name = c("Barney", "Ted", "Marshall",
"Lilly","Robin"),
gender = c("Male", "Male","Male",
"Female", "Female"),
grade = c(10, 11, 13, 12, 14)
)
df
reticulate::repl_python()
df = pd.DataFrame({
'name':["Barney", "Ted", "Marshall",
"Lilly", "Robin"],
'gender':["Male", "Male","Male",
"Female", "Female"],
'grade':[10, 11, 13, 12, 14]
})
df
quit
quit
df %>%
arrange(grade)
reticulate::repl_python()
# returns a series
df[['grade']].sort_values()
quit
reticulate::repl_python()
# returns a series
df[['grade']].sort_values()
quit
reticulate::repl_python()
# returns a series
df.sort_values('grade')
quit
df.sort_values('grade')
reticulate::repl_python()
df.sort_values('grade')
quit
df %>%
arrange(desc(grade))
reticulate::repl_python()
df.sort_values('grade', ascending = False)
quit
reticulate::repl_python()
df.sort_values(['gender','grade'],
ascending = [False, True])
nchar(y)
y <- c("Hello", "World", "Hello", "Universe")
nchar(y)
tolower(y)
toupper(y)
y
chartr("H", "*", y)
chartr("H", "*", y) # replaces H with *
chartr("oe", "$#", y)#o becomes $; e becomes #
x <- "Hello World"
chartr(x, 1, 9)
x <- "Hello World"
chartr(x, 2, 9)
x <- "Hello World"
chartr(x, 2, 9)
x <- "Hello World"
chartr(x, 2, 9)
x <- "Hello World"
substr(x, 2, 9)
substr(y, 2, 9)
substr(y, 2, 5)
substr(y, 2, 5)
substr(y, 2, 5)
y
x <- "Have you met?"
substr(x, 2, 6)
x <- "Have you met?"
substr(x, 2, 6) # provides strings from 2 to 6
x <- "1t345s?"
substr(x, 2, 6) # provides strings from 2 to 6
x <- "RoRockso!"
strsplit(x, split = "o")
x <- "RkRkocksk!"
strsplit(x, split = "o")
x <- "RkRkocksk!"
strsplit(x, split = "o")
x <- "RkRocsk!"
strsplit(x, split = "o")
x <- "RkRocsk!"
strsplit(x, split = "k")
x <- "RmRocksm!"
strsplit(x, split = "m")
tolower(y)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(dplyr)
reticulate::repl_python()
import pandas as pd
quit
df <- tibble(
name = c("Barney", "Ted", "Marshall",
"Lilly","Robin"),
gender = c("Male", "Male","Male",
"Female", "Female"),
grade = c(10, 11, 13, 12, 14)
)
df
df <- tibble(
name = c("Barney", "Ted", "Marshall",
"Lilly","Robin"),
gender = c("Male", "Male","Male",
"Female", "Female"),
grade = c(10, 11, 13, 12, 14)
)
df
reticulate::repl_python()
df = pd.DataFrame({
'name':["Barney", "Ted", "Marshall",
"Lilly", "Robin"],
'gender':["Male", "Male","Male",
"Female", "Female"],
'grade':[10, 11, 13, 12, 14]
})
df
quit
df %>%
filter(name == "Barney"| gender == "Female")
reticulate::repl_python()
# similar to base R
df[(df["name"] == "Barney") |
(df["gender"] == "Female")]
quit
reticulate::repl_python()
# query
df.query(name == "Barney"| gender == "Female")
quit
reticulate::repl_python()
# query
df.query(name == "Barney"| gender == "Female")
quit
reticulate::repl_python()
# query
df.query('name == "Barney"| gender == "Female"')
quit
reticulate::repl_python()
# query
df.query("name == "Barney"| gender == "Female"")
quit
# query
reticulate::repl_python()
df.query("name == "Barney"| gender == "Female"")
quit
reticulate::repl_python()
# query
df.query('name == "Barney"| gender == "Female"')
quit
reticulate::repl_python()
# query
df.query("name == 'Barney'| gender == 'Female'")
quit
reticulate::repl_python()
# query with ''; need to use "" for conditions
df.query('name == "Barney"|
gender == "Female"')
quit
reticulate::repl_python()
# query with ''; need to use "" for conditions
df.query('name == "Barney"|
gender == "Female"')
quit
reticulate::repl_python()
# query with ''; need to use "" for conditions
df.query('name == "Barney"|
gender == "Female"')
quit
reticulate::repl_python()
# query with ''; need to use "" for conditions
df.query('name == "Barney"|
gender == "Female"')
quit
reticulate::repl_python()
# query with ''; need to use "" for conditions
df.query('name == "Barney"|gender == "Female"')
quit
reticulate::repl_python()
# query with ""; need to use '' for conditions
df.query("name == 'Barney'| gender == 'Female'")
quit
df %>%
filter(name == "Barney"|
gender == "Female")
library(magrittr)
readr::read_csv("data/sql/Employees.csv") %>%
knitr::kable()
View(df)
readr::read_csv("data/sql/db2-employees.csv")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(magrittr)
readr::read_csv("data/sql/db2-employees.csv") %>%
knitr::kable()
library(dplyr)
readr::read_csv("data/sql/db2-employees.csv") %>%
select(1:5)
knitr::kable()
library(dplyr)
readr::read_csv("data/sql/db2-employees.csv") %>%
select(1:5) %>%
knitr::kable()
readr::read_csv("data/sql/db2-employees.csv") %>%
select(1,6:10)
knitr::kable()
readr::read_csv("data/sql/db2-employees.csv") %>%
select(1,6:10) %>%
knitr::kable()
readr::read_csv("data/sql/db2-employees.csv") %>%
select(6:ncol()) %>%
knitr::kable()
readr::read_csv("data/sql/db2-employees.csv")
readr::read_csv("data/sql/db2-departments.csv") %>%
select(6:11) %>%
knitr::kable()
library(dplyr)
readr::read_csv("data/sql/db2-employees.csv") %>%
select(1:5) %>%
knitr::kable()
readr::read_csv("data/sql/db2-departments.csv")
readr::read_csv("data/sql/db2-departments.csv") %>%
knitr::kable()
1.05^5
1.05^5*1200
reticulate::repl_python()
# toy list
x = [1, 200, 3, 400]
# Create toy function
def smaller_than_100(k):
if k < 100:
return True
else:
False
# test the function
smaller_than_100(2)
quit
reticulate::repl_python()
# toy list
toy_list = [1, 200, 3, 400]
# Create toy function
def smaller_than_100(k):
if k < 100:
return True
else:
False
# test the function
smaller_than_100(2)
quit
reticulate::repl_python()
# toy list
toy_list = [1, 200, 3, 400]
# Create toy function
def smaller_than_100(k):
if k < 100:
return True
else:
False
# test the function
smaller_than_100(2)
quit
reticulate::repl_python()
# apply it to toy_list
map(smaller_than_100, toy_list)
quit
reticulate::repl_python()
# apply it to toy_list
mapped = map(smaller_than_100, toy_list)
print(mapped)
quit
reticulate::repl_python()
# apply it to toy_list
mapped = map(smaller_than_100, toy_list)
print(mapped)
quit
reticulate::repl_python()
# apply it to toy_list
mapped = map(smaller_than_100, toy_list)
print(mapped)
quit
reticulate::repl_python()
# apply it to toy_list
mapped = map(smaller_than_100, toy_list)
print(mapped)
quit
reticulate::repl_python()
for i in mapped():
print(i)
quit
for i in mapped:
print(i)
quit
for i in mapped:
print(i)
quit
# apply it to toy_list
mapped = map(smaller_than_100, toy_list)
print(mapped) # doesn't provide the desired output; use loop
quit
for i in mapped:
reticulate::repl_python()
print(i)
quit
reticulate::repl_python()
for k in mapped:
print(k)
quit
for k in mapped:
print(k)
quit
for k in mapped:
print(k)
quit
for k in mapped:
print(k)
quit
for k in mapped:
print(k)
quit
for i in mapped:
print(i)
quit
for i in mapped:
print(i)
quit
for i in mapped:
print(i)
reticulate::repl_python()
# Extract mapping into new list
mapped_list = [*map(less_than_100, toy_list)]
mapped_list
quit
reticulate::repl_python()
# Extract mapping into new list
mapped_list = [*map(less_than_100, toy_list)]
quit
reticulate::repl_python()
# toy list
toy_list = [1, 200, 3, 400]
# Create toy function
def smaller_than_100(k):
if k < 100:
return True
else:
False
# test the function
smaller_than_100(2)
# apply it to toy_list
mapped = map(smaller_than_100, toy_list)
print(mapped) # doesn't provide the desired output; use loop
for i in mapped:
print(i)
quit
# Extract mapping into new list
mapped_list = [*map(less_than_100, toy_list)]
quit
reticulate::repl_python()
# Extract mapping into new list
mapped_list = [*map(less_than_100, toy_list)]
mapped_list
quit
reticulate::repl_python()
# Extract mapping into new list
mapped_list = [*map(less_than_100, toy_list)]
mapped_list
quit
reticulate::repl_python()
# Extract mapping into new list
mapped_list = [*map(smaller_than_100, toy_list)]
mapped_list
quit
reticulate::repl_python()
# Extract mapping into new list
mapped_list = [*map(smaller_than_100, toy_list)]
type(mapped_list)
print(mapped_list)
quit
reticulate::repl_python()
# Use map() with lambda function
[*map(lambda x: x < 100, toy_list)]
quit
reticulate::repl_python()
*map(lambda x: x < 100, toy_list)
quit
reticulate::repl_python()
x = [1, 3, 7, 9]
y = [1, 9, 49, 81]
[*zip(x, y)]
quit
reticulate::repl_python()
# can operate on more than two inputs
z = [1, 6, 42, 72]
[*zip(x, y, z)]
quit
reticulate::repl_python()
# can operate on more than two inputs
z = [1, 5, 8, 9]
[*zip(x, y, z)]
quit
reticulate::repl_python()
# can operate on more than two inputs
z = [1, 5, 8, 18]
[*zip(x, y, z)]
quit
reticulate::repl_python()
# can operate on more than two inputs
z = [10, 11, 12, 13]
[*zip(x, y, z)]
quit
reticulate::repl_python()
# zip() will continue upto the length of the shortest input
short_list = [1, 2]
long_list = [16, 7, 8, 9]
[*zip(short_list, long_list)]
quit
library(reticulate)
py_install("itertools")
reticulate::repl_python()
from itertools import zip_longest
quit
reticulate::repl_python()
from itertools import zip_longest
[*zip_longest(short_list, long_list, fillvalues = None)]
quit
reticulate::repl_python()
from itertools import zip_longest
[*zip_longest(short_list, long_list, fillvalues = None)]
quit
reticulate::repl_python()
from itertools import zip_longest
[*zip_longest(short_list, long_list, fillvalue = None)]
3000/12
250+1080
quit
reticulate::repl_python()
toy_names = ["Robin", "Barney", "Ted", "Lilly", "Marshall"]
enumerate(toy_names)
list(enumerate(toy_names))
quit
reticulate::repl_python()
toy_names = ["Robin", "Barney", "Ted", "Lilly", "Marshall"]
enumerate(toy_names)
quit
reticulate::repl_python()
# Use enumerate() in a for loop
for i, j in enumerate(toy_names):
print(i, j)
quit
# Use enumerate() in a for loop
for i, j in enumerate(toy_names):
print(i, j)
quit
dup_names = ["Robin", "Barney","Robin", "Ted", "Lilly", "Marshall", "Robin", "Ted", "Barney"]
names_dic = {dup_names:[] for name in set(dup_names)}
print(names_dic)
quit
reticulate::repl_python()
dup_names_list = ["Robin", "Barney","Robin", "Ted", "Lilly", "Marshall", "Robin", "Ted", "Barney"]
# create dictionary, keys:names; values: empty
names_dic = {name:[] for name in set(dup_names_list)}
print(names_dic)
# use enumerate() to store the index for each occurence
for index, name in enumerate(dup_names_list):
names_dic[name].append(index)
print(names_dic)
quit
reticulate::repl_python()
dup_names_list = ["Robin", "Barney","Robin", "Ted", "Lilly", "Marshall", "Robin", "Ted", "Barney"]
# create dictionary, keys:names; values: empty
names_dic = {name:[] for name in set(dup_names_list)}
print(names_dic)
quit
reticulate::repl_python()
# use enumerate() to store the index for each occurence
reticulate::repl_python()
for index, name in enumerate(dup_names_list):
names_dic[name].append(index)
print(names_dic)
quit
reticulate::repl_python()
# use enumerate() to store the index for each occurence
for index, name in enumerate(dup_names_list):
names_dic[name].append(index)
print(names_dic)
