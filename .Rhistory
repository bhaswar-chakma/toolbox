)
df
tibble(
country_code = c("BD", "PT",
"ES", "FR")
) %>%
df %>% knitr::kable()
tibble(
country_code = c("BD", "PT",
"ES", "FR")
) %>%
knitr::kable(df)
df
df %>%
knitr::kable()
reticulate::repl_python()
# isin in action
df[df["code"].isin(["BD", "PT"])]
quit
reticulate::repl_python()
country_list = ["BD", "PT"]
# @ in action
df.query('code == @country_list')
quit
reticulate::repl_python()
df.query('code in ["BD", "PT"]')
quit
reticulate::repl_python()
# toy data
data = {
# country code
'code':[
"BD", "PT",
"ES", "FR"
],
# capital
'capital':[
"Dhaka", "Lisbon",
"Madrid", "Paris"
]
}
df = pd.DataFrame(data)
df
quit
reticulate::repl_python()
# isin in action
df[df["code"].isin(["BD", "PT"])]
quit
reticulate::repl_python()
country_list = ["BD", "PT"]
# @ in action
df.query('code == @country_list')
# note: you must create a list first
# @["BD", "PT"] doesn't work
quit
reticulate::repl_python()
df.query('code in ["BD", "PT"]')
quit
df <- tibble(
country = c("Bangladesh", "Portugal"),
`1997` = c(59.4, 76.0),
`2007` = c(64.1, 78.1)
)
df
# pivot_longer in action
df %>%
pivot_longer(
cols = c(`1997`, `2007`),
names_to = "year",
values_to = "life_exp"
)
# pivot_longer in action
df <- df %>%
pivot_longer(
cols = c(`1997`, `2007`),
names_to = "year",
values_to = "life_exp"
)
dput(df)
df <- tibble(country, year, life_exp)
country <- c(
"Bangladesh", "Bangladesh",
"Portugal", "Portugal"
)
country <- c(
"Bangladesh", "Bangladesh",
"Portugal", "Portugal"
)
year <- c(
"1997", "2007",
"1997", "2007"
)
life_exp <- c(
59.4, 64.1,
76, 78.1
)
df <- tibble(country, year, life_exp)
df
df
df <- tibble(
country = c("Bangladesh", "Portugal"),
`1997` = c(59.4, 76.0),
`2007` = c(64.1, 78.1)
)
df
dput(df)
knitr::kable(df)
# pivot_wider in action
# pivot_longer in action
df %>%
pivot_wider(
names_from = "year",
values_from = "life_exp"
)
# toy data
country <- c(
"Bangladesh", "Bangladesh",
"Portugal", "Portugal"
)
year <- c(
"1997", "2007",
"1997", "2007"
)
life_exp <- c(
59.4, 64.1,
76, 78.1
)
df <- tibble(country, year, life_exp)
df
# pivot_wider in action
# pivot_longer in action
df %>%
pivot_wider(
names_from = "year",
values_from = "life_exp"
)
reticulate::repl_python()
# toy data
country =[
"Bangladesh", "Bangladesh",
"Portugal", "Portugal"
]
year = [
"1997", "2007",
"1997", "2007"
]
life_exp = [
59.4, 64.1,
76, 78.1
]
df = pd.DataFrame(
{'country': country,
'year': year,
'life_exp': life_exp}
)
df
quit
reticulate::repl_python()
# Fix the names
# 1. reset the index
df_wider.reset_index()
quit
reticulate::repl_python()
# Fix the names
# 1. reset the index
df_wider.reset_index()
quit
reticulate::repl_python()
# output looks different
#   due to index and column names
# Check name
df_wider.index
df_wider.columns
quit
reticulate::repl_python()
# pivot in action
df_wider = df.pivot(
index = 'country',
columns = 'year', # names from
values = 'life_exp' # vasles from
)
df_wider
quit
reticulate::repl_python()
# output looks different
#   due to index and column names
# Check name
df_wider.index
df_wider.columns
quit
reticulate::repl_python()
# Fix the names
# 1. reset the index
df_wider.reset_index()
quit
reticulate::repl_python()
# Fix the names
# 1. reset the index
df_wider.reset_index()
quit
reticulate::repl_python()
# Fix the names
# reset the index
df_wider = df_wider.reset_index()
df_wider
#
quit
reticulate::repl_python()
# reset the index
df_wider = df_wider.reset_index()
df_wider
# change index name
df_wider.index.name = None
df_wider
quit
reticulate::repl_python()
# toy data
country =[
"Bangladesh", "Bangladesh",
"Portugal", "Portugal"
]
year = [
"1997", "2007",
"1997", "2007"
]
life_exp = [
59.4, 64.1,
76, 78.1
]
df = pd.DataFrame(
{'country': country,
'year': year,
'life_exp': life_exp}
)
df
quit
reticulate::repl_python()
# pivot in action
df_wider = df.pivot(
index = 'country',
columns = 'year', # names from
values = 'life_exp' # vasles from
)
df_wider
quit
reticulate::repl_python()
# reset the index
df_wider = df_wider.reset_index()
df_wider
# change index name
df_wider.index.name = None
df_wider
quit
reticulate::repl_python()
# pivot in action
df_wide = df.pivot(
index = 'country',
columns = 'year', # names from
values = 'life_exp' # vasles from
)
df_wide
quit
reticulate::repl_python()
# Reset the names
df_wide.index.name = None
df_wide.columns.name = None
quit
reticulate::repl_python()
# Reset the names
df_wide.index.name = None
df_wide.columns.name = None
quit
reticulate::repl_python()
df_wide
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(dplyr)
library(tidyr)
library(reticulate)
reticulate::repl_python()
import pandas as pd
import numpy as np
quit
reticulate::repl_python()
# Step 1: Create conditions
cond = [
(df['age'].lt(18)),
(df['age'].ge(18) & (df['age'].lt(31))),
(df['age'].ge(31))
]
# Step 2: Assign labels
cond_labs = ['Kids', '18-30', '30 and above']
# Step 3: Use np.select() to generate the variable
df['age_cat'] = np.select(cond, cond_labs)
df
quit
reticulate::repl_python()
# Step 1: Create conditions
cond = [
(df['age'].lt(18)),
(df['age'].ge(18) & (df['age'].lt(31))),
(df['age'].ge(31))
]
quit
reticulate::repl_python()
# Step 1: Create conditions
cond = [
(df['age'].lt(18)),
(df['age'].ge(18) & (df['age'].lt(31))),
(df['age'].ge(31))
]
quit
reticulate::repl_python()
import pandas as pd
import numpy as np
quit
reticulate::repl_python()
df = pd.DataFrame({'age': [9, 10, 18, 21, 29, 31, 45]})
quit
reticulate::repl_python()
# Step 1: Create conditions
cond = [
(df['age'].lt(18)),
(df['age'].ge(18) & (df['age'].lt(31))),
(df['age'].ge(31))
]
quit
# Step 1: Create conditions
reticulate::repl_python()
cond = [
reticulate::repl_python()
(df['age'].lt(18)),
(df['age'].ge(18) & (df['age'].lt(31))),
(df['age'].ge(31))
]
quit
# Step 1: Create conditions
reticulate::repl_python()
cond = [
reticulate::repl_python()
(df['age'].lt(18)),
(df['age'].ge(18) &
(df['age'].lt(31))),
(df['age'].ge(31))
]
quit
reticulate::repl_python()
# Step 1: Create conditions
cond = [
(df['age'].lt(18)),
(df['age'].ge(18) & (df['age'].lt(31))),
(df['age'].ge(31))
]
quit
# Step 1: Create conditions
reticulate::repl_python()
cond = [
reticulate::repl_python()
(df['age'].lt(18)),
(df['age'].ge(18) & (df['age'].lt(31))),
(df['age'].ge(31))
]
# Step 2: Assign labels
cond_labs = [
'Kids', '18-30', '30 and above'
]
# Step 3: np.select() in action
df['age_cat'] = np.select(cond, cond_labs)
df
quit
reticulate::repl_python()
# Step 1: Create conditions
cond = [
(df['age'].lt(18)),
(df['age'].ge(18) & (df['age'].lt(31))),
(df['age'].ge(31))
]
# Step 2: Assign labels
cond_labs = [
'Kids', '18-30', '30 and above'
]
# Step 3: np.select() in action
df['age_cat'] = np.select(cond, cond_labs)
df
quit
reticulate::repl_python()
# Step 1: Create bin condition
bin_cond = [0, 17, 30, np.inf]
# note: instead of 0,
#       -np.inf will also work
#
# 0: greater than 0
# 17: upper limit is 17
# Step 2: Assign bin labs
bin_labs = [
'Kids',
'18-30',
'30 and above'
]
# Step 3: pd.cut() in action
df["age_cat"] = pd.cut(
df["age"],
bins = bin_cond,
labels = bin_labs
)
df
quit
# example data
df <- tibble(age = c(9, 10, 18, 21, 29, 31, 45))
# case_when() in action
df %>%
mutate(age_cat = case_when(
age < 18 ~ "Kids",
age >= 18 & age < 31 ~ "18-30",
age >= 31 ~ "31 and above"
))
knitr::kable(df)
df %>%
mutate(age_cat = case_when(
age < 18 ~ "Kids",
age >= 18 & age < 31 ~ "18-30",
age >= 31 ~ "31 and above"
))
df %>%
mutate(age_cat = case_when(
age < 18 ~ "Kids",
age >= 18 & age < 31 ~ "18-30",
age >= 31 ~ "31 and above"
)) %>%
knitr::kable()
df
knitr::kable(df)
knitr::kable(df)
# toy data
df <- tibble(
info = c(
"XYZ Deposit 2020",
"Cash Deposit",
"ATM",
"XYZ Fee 2021",
"XYZ Deposit 2021"
),
amount = seq(1,5) - 1
)
library(dplyr)
library(tidyr)
library(reticulate)
reticulate::repl_python()
import pandas as pd
import numpy as np
quit
df %>%
knitr::kable()
# toy data
df <- tibble(
info = c(
"XYZ Deposit 2020",
"Cash Deposit",
"ATM",
"XYZ Fee 2021",
"XYZ Deposit 2021"
),
amount = seq(1,5) - 1
)
df %>%
knitr::kable()
# toy data
df <- tibble(
info = c(
"XYZ Deposit 2020",
"Cash Deposit",
"ATM",
"XYZ Fee 2021",
"XYZ Deposit 2021"
),
amount = seq(1,5) - 1
)
df
# str_detect() in action
df %>%
filter( # keeps
str_detect(info, "XYZ")
)
# str_detect() in action
df %>%
filter( # keeps
stringr::str_detect(info, "XYZ")
)
# str_detect() in action
df %>%
filter( # drops
!stringr::str_detect(
info, "XYZ"
)
)
reticulate::repl_python()
# toy data
df = pd.DataFrame({
'info':
[
"XYZ Deposit 2020",
"Cash Deposit",
"ATM",
"XYZ Fee 2021",
"XYZ Deposit 2021"
],
'amount': np.arange(5)
})
df
quit
reticulate::repl_python()
# str.contains in action: drop
df[~df['info'].str.contains("XYZ")]
