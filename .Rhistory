df_stat.index
reticulate::repl_python()
df_stat = df_stat.unstack()
df_stat
quit
reticulate::repl_python()
df_stat.reset_index()
quit
reticulate::repl_python()
df_stat = df_stat.unstack()
df_stat
quit
reticulate::repl_python()
# grouped by year and gender:
# find mean grade
df_stat = df.groupby(
['year', 'gender']
).agg({
'grade': ['mean']
})
df_stat
quit
df_stat.index
reticulate::repl_python()
df_stat.index
quit
reticulate::repl_python()
df_stat = df_stat.unstack()
df_stat
quit
reticulate::repl_python()
df_stat.reset_index()
quit
reticulate::repl_python()
df_stat.columns
quit
reticulate::repl_python()
df_stat.index.name = None
df_stat.columns.name = None
quit
reticulate::repl_python()
df_stat
quit
reticulate::repl_python()
df_stat = df_stat.unstack()
df_stat
quit
reticulate::repl_python()
# grouped by year and gender:
# find mean grade
df_stat = df.groupby(
['year', 'gender']
).agg({
'grade': ['mean']
})
df_stat
quit
reticulate::repl_python()
df_stat.index
quit
reticulate::repl_python()
df_unstacked = df_stat.unstack()
df_unstacked
quit
reticulate::repl_python()
df_reset = df_unstacked.reset_index()
df_reset
quit
df_unstacked.index()
df_unstacked
reticulate::repl_python()
# toy data
year = [2010, 2010, 2010, 2020, 2020, 2020]
name = ["X", "Y", "Z", "X", "Y", "Z"]
gender = ["M", "F", "F", "M", "F", "F"]
grade = [10, 10, 20, 20, 12.5, 17.5]
df = pd.DataFrame(
{
'year': year,
'name': name,
'gender': gender,
'grade': grade
}
)
df
quit
# grouped by year and gender:
reticulate::repl_python()
# find mean grade
df_stat = df.groupby(
['year', 'gender']
).agg({
'grade': ['mean']
})
df_stat
quit
reticulate::repl_python()
df_unstacked = df_stat.unstack()
df_unstacked
quit
reticulate::repl_python()
df_unstacked.index()
quit
reticulate::repl_python()
df_unstacked.index()
quit
reticulate::repl_python()
df_unstacked.index
quit
reticulate::repl_python()
df_unstacked.reset_index()
quit
reticulate::repl_python()
df_reset = df_unstacked.reset_index()
df_reset
quit
reticulate::repl_python()
df_reset.index.name = None
df_reset.columns.name = None
quit
reticulate::repl_python()
df_reset.index.name = None
df_reset.columns.name = None
quit
reticulate::repl_python()
df_reset
quit
reticulate::repl_python()
# toy data
year = [2010, 2010, 2010, 2020, 2020, 2020]
name = ["X", "Y", "Z", "X", "Y", "Z"]
gender = ["M", "F", "F", "M", "F", "F"]
grade = [10, 10, 20, 20, 12.5, 17.5]
df = pd.DataFrame(
{
'year': year,
'name': name,
'gender': gender,
'grade': grade
}
)
df
quit
reticulate::repl_python()
# grouped by year and gender:
# find mean grade
df_stat = df.groupby(
['year', 'gender']
).agg({
'grade': ['mean']
})
df_stat
quit
reticulate::repl_python()
df_unstacked = df_stat.unstack()
df_unstacked
quit
reticulate::repl_python()
df_reset = df_unstacked.reset_index()
df_reset
quit
reticulate::repl_python()
df_reset.index.name = None
df_reset.columns.name = None
quit
reticulate::repl_python()
df_reset
quit
reticulate::repl_python()
df_reset.columns = ['year', 'M', 'F']
quit
reticulate::repl_python()
df_reset
quit
reticulate::repl_python()
# toy data
year = [2010, 2010, 2010, 2020, 2020, 2020]
name = ["X", "Y", "Z", "X", "Y", "Z"]
gender = ["M", "F", "F", "M", "F", "F"]
grade = [10, 10, 20, 20, 12.5, 17.5]
df = pd.DataFrame(
{
'year': year,
'name': name,
'gender': gender,
'grade': grade
}
)
df
quit
reticulate::repl_python()
# grouped by year and gender:
# find mean grade
df_stat = df.groupby(
['year', 'gender']
).agg({
'grade': ['mean']
})
df_stat
quit
reticulate::repl_python()
df_unstacked = df_stat.unstack()
df_unstacked
quit
reticulate::repl_python()
df_unstacked.columns = ['year', 'M', 'F']
quit
reticulate::repl_python()
df_unstacked
quit
reticulate::repl_python()
# To change the names
df_reset = df_unstacked.reset_index()
df_reset
quit
reticulate::repl_python()
df_reset.columns = ['year', 'M', 'F']
quit
df_reset
reticulate::repl_python()
df_reset
library(dplyr)
library(dplyr)
library(reticulate)
reticulate::repl_python()
import pandas as pd
import numpy as np
quit
# toy data
df1 = tibble({
'id'= c("hiRS", "hiTM",
"bbP", "bbSC"),
# toy data
df1 = tibble(
'id'= c("hiRS", "hiTM",
"bbP", "bbSC"),
'first_name':c(
'Robin',
'Ted',
'Penny',
'Sheldon'
)
)
# toy data
df1 = tibble(
'id'= c("hiRS", "hiTM",
"bbP", "bbSC"),
'first_name'= c(
'Robin',
'Ted',
'Penny',
'Sheldon'
)
)
df1
# toy data
df1 = tibble(
'id'= c("hiRS", "hiTM",
"bbP", "bbSC"),
'first_name'= c(
'Robin',
'Ted',
'Penny',
'Sheldon'
)
)
df1
df2 = tibble(
'id'= c("hiRS", "hiTM",
"bbSC", "bbLH"),
'last_name'= c(
'Robin',
'Ted',
'Cooper',
'Hofstadter'
)
)
df2
df1 %>%
knitr::kable()
df2 %>%
knitr::kable()
reticulate::repl_python()
# toy data
df1 = pd.DataFrame({
'id': ["hiRS", "hiTM",
"bbP", "bbSC"],
'first_name':[
'Robin',
'Ted',
'Penny',
'Sheldon'
]
})
df1
df2 = pd.DataFrame({
'id': ["hiRS", "hiTM",
"bbSC", "bbLH"],
'last_name':[
'Scherbatsky',
'Mosby',
'Cooper',
'Hofstadter'
]
})
df2
quit
py_install("matplotlib")
py_install("seaborn")
py_install("scikit-learn")
# inner_join in action
df2 %>% inner_join(df2)
# inner_join in action
df2 %>% inner_join(df2, by = "id")
# inner_join in action
df1 %>% inner_join(df2, by = "id")
reticulate::repl_python()
# merge(how = "outer") in action
df1.merge(df2, how = 'outer', on = 'id')
# note: default is inner join
# i.e. df1.merge(df2) does inner join
reticulate::repl_python()
import pandas as pd
import numpy as np
import matplotlib as plt
quit
reticulate::repl_python()
# toy data
x = np.arange(11)
y = np.exp(np.arange(11))
# basic plot: line(default)
plt.plot(x, y)
quit
reticulate::repl_python()
# toy data
x = np.arange(11)
y = np.exp(np.arange(11))
# basic plot: line(default)
plt.plot(x, y)
quit
reticulate::repl_python()
import pandas as pd
import numpy as np
import matplotlib as plt
quit
reticulate::repl_python()
import matplotlib as plt
quit
reticulate::repl_python()
x
y
quit
reticulate::repl_python()
import pandas as pd
import numpy as np
import matplotlib as plt
%matplotlib inline
quit
reticulate::repl_python()
# toy data
x = np.arange(11)
y = np.exp(np.arange(11))
# basic plot: line(default)
plt.plot(x, y)
quit
reticulate::repl_python()
# toy data
x = np.arange(11)
y = np.exp(np.arange(11))
# basic plot: line(default)
plt.plot(x, y)
plt.show()
quit
reticulate::repl_python()
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
quit
reticulate::repl_python()
# toy data
x = np.arange(11)
y = np.exp(np.arange(11))
# basic plot: line(default)
plt.plot(x, y)
plt.show()
quit
reticulate::repl_python()
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
quit
reticulate::repl_python()
# toy data
x = np.arange(11)
y = np.exp(np.arange(11))
# basic plot: line(default)
plt.plot(x, y)
plt.show()
quit
reticulate::repl_python()
# toy data
x = np.arange(11)
y = np.exp(np.arange(11))
# basic plot: line(default)
plt.plot(x, y)
plt.show()
quit
reticulate::repl_python()
# toy data
x = np.arange(11)
y = np.exp(np.arange(11))
# basic plot: line(default)
plt.plot(x, y)
quit
reticulate::repl_python()
# toy data
x = np.arange(11)
y = np.exp(np.arange(11))
# basic plot: line(default)
plt.plot(x, y)
plt.show()
quit
reticulate::repl_python()
# toy data
x = np.arange(11)
y = np.exp(np.arange(11))
# basic plot: line(default)
plt.plot(x, y, color = 'blue')
plt.show()
quit
reticulate::repl_python()
# toy data
x = np.arange(11)
y = np.exp(np.arange(11))
quit
reticulate::repl_python()
# basic plot: line(default)
plt.plot(x, y, color = 'blue')
plt.show()
quit
# toy data
x <- seq(0, 10)
# toy data
x <- seq(0, 10)
y <- exp(x)
plot(x, y)
reticulate::repl_python()
%matplotlib inline
# basic plot: line(default)
plt.plot(x, y, color = 'blue')
reticulate::repl_python()
# default 'kind' is 'line'
plt.plot(
x, y,
color = 'blue'
);
# titles are added separately
plt.title('Matplotlib line plot');
plt.xlabel('x');
plt.ylabel('$y = e^x$');
plt.show()
df %>% knitr::kable()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(dplyr)
library(reticulate)
reticulate::repl_python()
import pandas as pd
import numpy as np
quit
df <- tibble(
name = c('A', 'B',
NA, 'D'),
age = c(21, NA,
NA, 40)
)
df %>% drop_na()
df <- tibble(
name = c('A', 'B',
NA, 'D'),
age = c(21, NA,
NA, 40)
)
df %>% drop_na()
df <- tibble(
name = c('A', 'B',
NA, 'D'),
age  =  c(21, NA,
NA, 40)
)
kntir::kable(df)
knitr::kable(df)
reticulate::repl_python()
# toy data
# toy data
df = pd.DataFrame({
'name': [
'A', 'B', np.nan, 'D'
],
'age': [
21, np.nan, np.nan, 40
]
})
df
quit
reticulate::repl_python()
# drop missing rows
df.dropna()
quit
reticulate::repl_python()
# drop specific variable
df[df['name'].notna()]
