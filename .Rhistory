olympics.dtypes
quit
reticulate::repl_python()
olympic.dtypes
quit
reticulate::repl_python()
olympic
quit
reticulate::repl_python()
type(olympic)
quit
reticulate::repl_python()
type(olympic[['year']])
quit
reticulate::repl_python()
olympic[['year']].shape
quit
reticulate::repl_python()
X2 = olympic[['year']]
X2.shape
quit
reticulate::repl_python()
# Now fit the model
model.fit(X, y)
print(model.coef_) # coefficient
print(model.intercept_) # intercept
quit
reticulate::repl_python()
# Now fit the model
model.fit(X2, y)
print(model.coef_) # coefficient
print(model.intercept_) # intercept
reticulate::repl_python()
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn import linear_model, preprocessing, model_selection
from sklearn.model_selection import train_test_split, cross_val_score
quit
reticulate::repl_python()
# x is our predictor matrix
# y is a numeric output - for regression methods
# z is a categorical output - for classification methods
X = np.arange(20).reshape((2, -1)).T
y = np.arange(10)
z = np.array([0,0,0,0,0,1,1,1,1,1])
print(X)
print(y)
print(z)
quit
library(reticulate)
reticulate::repl_python()
train_test_split(X, test_size = 1/4, random_state = 1)
quit
reticulate::repl_python()
# Example data: ironslag
iron = pd.read_csv('https://raw.githubusercontent.com/bhaswar-chakma/toolbox/main/data/ironslag.csv')
iron.head()
quit
reticulate::repl_python()
iron.head()
iron.shape
quit
reticulate::repl_python()
plt.scatter(iron.magnetic, iron.chemical)
quit
reticulate::repl_python()
X_train, X_test, y_train, y_test = train_test_split(
iron, test_size = 1/5, random_state = 1
)
quit
reticulate::repl_python()
train, test = train_test_split(
iron, test_size = 1/5, random_state = 1
)
quit
reticulate::repl_python()
train
quit
reticulate::repl_python()
test
quit
reticulate::repl_python()
plt.scatter(train.magnetic, train.chemical)
quit
reticulate::repl_python()
plt.scatter(train.magnetic, train.chemical)
quit
reticulate::repl_python()
plt.scatter(train.magnetic, train.chemical)
quit
plt.scatter(train.magnetic, train.chemical)
reticulate::repl_python()
plt.scatter(train.magnetic, train.chemical)
quit
reticulate::repl_python()
train.magnetic.values
quit
reticulate::repl_python()
# sklearn requires our predictor variables to be in a two dimensional array
# reshape to have 1 column
# the -1 in reshape means I don't want to figure out all the necessary dimensions
# i want 1 column, and numpy, you figure out how many rows I need
X = train.magnetic.values.reshape(-1,1)
X.shape
quit
reticulate::repl_python()
y = train.chemical.values
y.shape
quit
reticulate::repl_python()
np.corrcoef(train.magnetic.values, train.chemical.values)
quit
reticulate::repl_python()
# r-squared
np.corrcoef(train.magnetic.values, train.chemical.values)[0,1] ** 2
quit
0.70876994^2
reticulate::repl_python()
linear = linear_model.LinearRegression()
linear.fit(X, y)
quit
reticulate::repl_python()
# linear.score is the R^2 value
# how much error is reduced from no model (variance or MSE)
# vs having the regression model
linear.score(X, y)
quit
reticulate::repl_python()
# linear.score is the R^2 value
# how much error is reduced from no model (variance or MSE)
# vs having the regression model
linear.score(X, y)
np.arange(10, 40)
quit
reticulate::repl_python()
x_predict = np.arange(10, 40).reshape(-1,1)
quit
reticulate::repl_python()
plt.scatter(X, y)
plt.plot(x_predict, lin_y_hat, c = 'red')
quit
reticulate::repl_python()
# shuffle split says 'shuffle the data' and split it into 5 equal parts
cv = model_selection.ShuffleSplit(n_splits = 5, test_size = 0.3, random_state=0)
cv_linear = model_selection.cross_val_score(linear, X, y, cv = cv)
print(cv_linear)
print(np.mean(cv_linear))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(dplyr)
reticulate::repl_python()
import pandas as pd
quit
import pandas as pd
reticulate::repl_python()
import numpy as np
quit
library(reticulate)
library(reticulate)
py_install("numpy")
reticulate::repl_python()
import pandas as pd
import numpy as np
quit
df <- (1, 2, 9, 10, 12, 18, 19, 20, 21, 29, 31, 38, 45)
df <- tibble(age = c(1, 2, 9, 10, 12, 18, 19, 20, 21, 29, 31, 38, 45))
df <- tibble(age = c(1, 2, 9, 10, 12, 18, 19, 20, 21, 29, 31, 38, 45))
knitr::kable(df)
df %>%
mutate(age_cat = case_when(
age < 18 ~ "Kids",
age >= 18 & age < 31 ~ "18-30",
age >= 31 ~ "31 +"
))
df <- tibble(age = c(9, 10, 18, 21, 29, 31, 45))
knitr::kable(df)
df %>%
mutate(age_cat = case_when(
age < 18 ~ "Kids",
age >= 18 & age < 31 ~ "18-30",
age >= 31 ~ "31 +"
))
df %>%
mutate(age_cat = case_when(
age < 18 ~ "Kids",
age >= 18 & age < 31 ~ "18-30",
age >= 31 ~ "31 and above"
))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(dplyr)
reticulate::repl_python()
import pandas as pd
import numpy as np
quit
# example data
df <- tibble(age = c(9, 10, 18, 21, 29, 31, 45))
# case_when() in action
df %>%
mutate(age_cat = case_when(
age < 18 ~ "Kids",
age >= 18 & age < 31 ~ "18-30",
age >= 31 ~ "31 and above"
))
reticulate::repl_python()
df = pd.DataFrame({'age': [9, 10, 18, 21, 29, 31, 45]})
quit
df <- tibble(shirt_prices = c(25, 30, 45, 80,100, 125))
knitr::kable(df)
# toy data
df <- tibble(price = c(25, 30, 45, 80,100, 125))
df %>%
mutate(price_cat = if_else(
price <50, "Cheap", "Expenseive"
))
reticulate::repl_python()
df = pd.DataFrame({'price': [25, 30, 45, 80,100, 125]})
df
quit
reticulate::repl_python()
df = pd.DataFrame({'price': [25, 30, 45, 80,100, 125]})
# np.where() in action
df['price_cat'] = np.where(df.price < 50, "Cheap", "Expenseive")
quit
reticulate::repl_python()
df = pd.DataFrame({'price': [25, 30, 45, 80,100, 125]})
# np.where() in action
df['price_cat'] = np.where(df.price < 50, "Cheap", "Expenseive")
df
quit
reticulate::repl_python()
prices = {'price': [25, 30, 45, 80,100, 125]}
df = pd.DataFrame(prices)
# np.where() in action
df['price_cat'] = np.where(
df.price < 50, "Cheap", "Expenseive"
)
df
quit
reticulate::repl_python()
prices = {'price': [25, 30, 45, 80,100, 125]}
df = pd.DataFrame(prices)
# np.where() in action
df['price_cat'] = np.where(
df.price < 50, "Cheap", "Expenseive"
)
df
quit
# toy data
prices <- c(25, 30, 45, 80,100, 125)
df <- tibble(price = prices)
# case_when in action
df %>%
mutate(price_cat = if_else(
price <50, "Cheap", "Expenseive"
))
library(tidyverse)
install.packages("gapminder")
library(gapminder)
df <- gapminder
df
df %>%
filter(country %in% c("Afghanistan", "Bangladesh", "China"))
df %>%
filter(country %in% c("Afghanistan", "Bangladesh", "China")) %>%
filter(year %in% c(1980,1990, 2000))
df %>%
distinct(year)
df %>%
filter(country %in% c("Afghanistan", "Bangladesh", "China")) %>%
filter(year %in% c(1987,1997, 2007))
df %>%
filter(country %in% c("Afghanistan", "Bangladesh", "China")) %>%
filter(year %in% c(1997, 2007))
df %>%
filter(country %in% c("Bangladesh", "Portugal")) %>%
filter(year %in% c(1997, 2007))
df %>%
filter(country %in% c("Bangladesh", "Portugal")) %>%
filter(year %in% c(1997, 2007)) %>%
select(country, pop)
country <- c("Bangladesh", "Portugal")
df %>%
filter(country %in% c("Bangladesh", "Portugal")) %>%
filter(year %in% c(1997, 2007)) %>%
select(country, pop, year)
year <- c(1997, 2007)
df %>%
filter(country %in% c("Bangladesh", "Portugal")) %>%
filter(year %in% c(1997, 2007)) %>%
select(country, lifeExp, year)
country <- c("Bangladesh", "Portugal")
year_1997 <- c(59.4, 76.0)
year_2007 <- c(64.1, 78.1)
df <- tibble(country, y1997, y2007)
y1997 <- c(59.4, 76.0)
y2007 <- c(64.1, 78.1)
df <- tibble(country, y1997, y2007)
df
knitr::kable(df)
df <- tibble(
country = country,
`1997` = y1997,
`2007` = y2007)
df
knitr::kable(df)
df %>%
pivot_longer(
cols = c(`1997`, `2007`),
names_to = "year",
values_to = "life_expectancy"
)
df %>%
pivot_longer(
cols = c(`1997`, `2007`),
names_to = "year",
values_to = "life_expectancy"
) %>%
knitr::kable()
df %>%
pivot_longer(
cols = c(`1997`, `2007`),
names_to = "year",
values_to = "life_exp"
) %>%
knitr::kable()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
reticulate::repl_python()
# toy data
data = {
'country': ["Bangladesh", "Portugal"],
`1997`: [59.4, 76.0],
`2007`: [64.1, 78.1]
}
df = pd.DataFrame(prices)
df
quit
reticulate::repl_python()
# toy data
data = {
'country': ["Bangladesh", "Portugal"],
`1997`: [59.4, 76.0],
`2007`: [64.1, 78.1]
}
df = pd.DataFrame(df)
df
quit
reticulate::repl_python()
# toy data
data = {
'country': ["Bangladesh", "Portugal"],
`1997`: [59.4, 76.0],
`2007`: [64.1, 78.1]
}
df = pd.DataFrame(data)
df
quit
reticulate::repl_python()
# toy data
data = {
'country': ["Bangladesh", "Portugal"],
`1997`: [59.4, 76.0],
`2007`: [64.1, 78.1]
}
data
quit
# toy data
reticulate::repl_python()
data = {
reticulate::repl_python()
'country': ["Bangladesh", "Portugal"],
'1997': [59.4, 76.0],
'2007': [64.1, 78.1]
}
data
quit
# toy data
reticulate::repl_python()
data = {
reticulate::repl_python()
'country': ["Bangladesh", "Portugal"],
'1997': [59.4, 76.0],
'2007': [64.1, 78.1]
}
df = pd.DataFrame(data)
df
quit
reticulate::repl_python()
import pandas as pd
import numpy as np
quit
library(dplyr)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
reticulate::repl_python()
import pandas as pd
import numpy as np
quit
reticulate::repl_python()
# create df
data = {
'country': ["Bangladesh", "Portugal"],
'1997': [59.4, 76.0],
'2007': [64.1, 78.1]
}
df = pd.DataFrame(data)
df
quit
reticulate::repl_python()
# create df
data = {
'country': ["Bangladesh", "Portugal"],
'1997': [59.4, 76.0],
'2007': [64.1, 78.1]
}
df = pd.DataFrame(data)
# reshape: long
df.melt(id_vars='country', value_vars=['1997', '2007'])
quit
# create df
reticulate::repl_python()
data = {
reticulate::repl_python()
'country': ["Bangladesh", "Portugal"],
'1997': [59.4, 76.0],
'2007': [64.1, 78.1]
}
df = pd.DataFrame(data)
# reshape: long
df.melt(
id_vars='country',
value_vars=['1997', '2007'],
value_name = 'life_exp'
)
quit
reticulate::repl_python()
# create df
data = {
'country': ["Bangladesh", "Portugal"],
'1997': [59.4, 76.0],
'2007': [64.1, 78.1]
}
df = pd.DataFrame(data)
# reshape: long
df.melt(
id_vars='country',
value_vars=['1997', '2007'],
value_name = 'life_exp'
)
quit
reticulate::repl_python()
# create df
data = {
'country': ["Bangladesh", "Portugal"],
'1997': [59.4, 76.0],
'2007': [64.1, 78.1]
}
df = pd.DataFrame(data)
# reshape: long
df.melt(
id_vars = 'country',
value_vars = ['1997', '2007'],
value_name = 'life_exp'
var_name = 'year'
)
quit
reticulate::repl_python()
# create df
data = {
'country': ["Bangladesh", "Portugal"],
'1997': [59.4, 76.0],
'2007': [64.1, 78.1]
}
df = pd.DataFrame(data)
# reshape: long
df.melt(
id_vars = 'country',
value_vars = ['1997', '2007'],
value_name = 'life_exp'
var_name = 'year'
)
quit
reticulate::repl_python()
# create df
data = {
'country': ["Bangladesh", "Portugal"],
'1997': [59.4, 76.0],
'2007': [64.1, 78.1]
}
df = pd.DataFrame(data)
# reshape: long
df.melt(
id_vars = 'country',
value_vars = ['1997', '2007'],
value_name = 'life_exp'
var_name = 'year'
)
quit
reticulate::repl_python()
# create df
data = {
'country': ["Bangladesh", "Portugal"],
'1997': [59.4, 76.0],
'2007': [64.1, 78.1]
}
df = pd.DataFrame(data)
# reshape: long
df.melt(
id_vars = 'country',
value_vars = ['1997', '2007'],
value_name = 'life_exp'
var_name = 'year'
)
